// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type InputDataSetCreate struct {
	Description string `json:"description"`
	Enabled     bool   `json:"enabled"`
	IconType    string `json:"iconType"`
	Name        string `json:"name"`
}

// GetDescription returns InputDataSetCreate.Description, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetDescription() string { return v.Description }

// GetEnabled returns InputDataSetCreate.Enabled, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetEnabled() bool { return v.Enabled }

// GetIconType returns InputDataSetCreate.IconType, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetIconType() string { return v.IconType }

// GetName returns InputDataSetCreate.Name, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetName() string { return v.Name }

type InputDataSetUpdate struct {
	Description string `json:"description"`
	Enabled     bool   `json:"enabled"`
	IconType    string `json:"iconType"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}

// GetDescription returns InputDataSetUpdate.Description, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetDescription() string { return v.Description }

// GetEnabled returns InputDataSetUpdate.Enabled, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetEnabled() bool { return v.Enabled }

// GetIconType returns InputDataSetUpdate.IconType, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetIconType() string { return v.IconType }

// GetId returns InputDataSetUpdate.Id, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetId() string { return v.Id }

// GetName returns InputDataSetUpdate.Name, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetName() string { return v.Name }

// __createDataSetInput is used internally by genqlient
type __createDataSetInput struct {
	DataSetCreate InputDataSetCreate `json:"dataSetCreate"`
}

// GetDataSetCreate returns __createDataSetInput.DataSetCreate, and is useful for accessing the field via an interface.
func (v *__createDataSetInput) GetDataSetCreate() InputDataSetCreate { return v.DataSetCreate }

// __deleteDataSetInput is used internally by genqlient
type __deleteDataSetInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDataSetInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDataSetInput) GetId() string { return v.Id }

// __updateDataSetInput is used internally by genqlient
type __updateDataSetInput struct {
	DataSetUpdate InputDataSetUpdate `json:"dataSetUpdate"`
}

// GetDataSetUpdate returns __updateDataSetInput.DataSetUpdate, and is useful for accessing the field via an interface.
func (v *__updateDataSetInput) GetDataSetUpdate() InputDataSetUpdate { return v.DataSetUpdate }

// createDataSetCreateDataSet includes the requested fields of the GraphQL type DataSet.
type createDataSetCreateDataSet struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType string `json:"iconType"`
}

// GetId returns createDataSetCreateDataSet.Id, and is useful for accessing the field via an interface.
func (v *createDataSetCreateDataSet) GetId() string { return v.Id }

// GetName returns createDataSetCreateDataSet.Name, and is useful for accessing the field via an interface.
func (v *createDataSetCreateDataSet) GetName() string { return v.Name }

// GetDescription returns createDataSetCreateDataSet.Description, and is useful for accessing the field via an interface.
func (v *createDataSetCreateDataSet) GetDescription() string { return v.Description }

// GetIconType returns createDataSetCreateDataSet.IconType, and is useful for accessing the field via an interface.
func (v *createDataSetCreateDataSet) GetIconType() string { return v.IconType }

// createDataSetResponse is returned by createDataSet on success.
type createDataSetResponse struct {
	CreateDataSet createDataSetCreateDataSet `json:"createDataSet"`
}

// GetCreateDataSet returns createDataSetResponse.CreateDataSet, and is useful for accessing the field via an interface.
func (v *createDataSetResponse) GetCreateDataSet() createDataSetCreateDataSet { return v.CreateDataSet }

// dataSetsDataSetsDataSetResultSet includes the requested fields of the GraphQL type DataSetResultSet.
type dataSetsDataSetsDataSetResultSet struct {
	Count   int64                                            `json:"count"`
	Results []dataSetsDataSetsDataSetResultSetResultsDataSet `json:"results"`
	Total   int64                                            `json:"total"`
}

// GetCount returns dataSetsDataSetsDataSetResultSet.Count, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSet) GetCount() int64 { return v.Count }

// GetResults returns dataSetsDataSetsDataSetResultSet.Results, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSet) GetResults() []dataSetsDataSetsDataSetResultSetResultsDataSet {
	return v.Results
}

// GetTotal returns dataSetsDataSetsDataSetResultSet.Total, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSet) GetTotal() int64 { return v.Total }

// dataSetsDataSetsDataSetResultSetResultsDataSet includes the requested fields of the GraphQL type DataSet.
type dataSetsDataSetsDataSetResultSetResultsDataSet struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType string `json:"iconType"`
}

// GetId returns dataSetsDataSetsDataSetResultSetResultsDataSet.Id, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSetResultsDataSet) GetId() string { return v.Id }

// GetName returns dataSetsDataSetsDataSetResultSetResultsDataSet.Name, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSetResultsDataSet) GetName() string { return v.Name }

// GetDescription returns dataSetsDataSetsDataSetResultSetResultsDataSet.Description, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSetResultsDataSet) GetDescription() string {
	return v.Description
}

// GetIconType returns dataSetsDataSetsDataSetResultSetResultsDataSet.IconType, and is useful for accessing the field via an interface.
func (v *dataSetsDataSetsDataSetResultSetResultsDataSet) GetIconType() string { return v.IconType }

// dataSetsResponse is returned by dataSets on success.
type dataSetsResponse struct {
	DataSets dataSetsDataSetsDataSetResultSet `json:"dataSets"`
}

// GetDataSets returns dataSetsResponse.DataSets, and is useful for accessing the field via an interface.
func (v *dataSetsResponse) GetDataSets() dataSetsDataSetsDataSetResultSet { return v.DataSets }

// deleteDataSetResponse is returned by deleteDataSet on success.
type deleteDataSetResponse struct {
	DeleteDataSet bool `json:"deleteDataSet"`
}

// GetDeleteDataSet returns deleteDataSetResponse.DeleteDataSet, and is useful for accessing the field via an interface.
func (v *deleteDataSetResponse) GetDeleteDataSet() bool { return v.DeleteDataSet }

// updateDataSetResponse is returned by updateDataSet on success.
type updateDataSetResponse struct {
	UpdateDataSet updateDataSetUpdateDataSet `json:"updateDataSet"`
}

// GetUpdateDataSet returns updateDataSetResponse.UpdateDataSet, and is useful for accessing the field via an interface.
func (v *updateDataSetResponse) GetUpdateDataSet() updateDataSetUpdateDataSet { return v.UpdateDataSet }

// updateDataSetUpdateDataSet includes the requested fields of the GraphQL type DataSet.
type updateDataSetUpdateDataSet struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType string `json:"iconType"`
}

// GetId returns updateDataSetUpdateDataSet.Id, and is useful for accessing the field via an interface.
func (v *updateDataSetUpdateDataSet) GetId() string { return v.Id }

// GetName returns updateDataSetUpdateDataSet.Name, and is useful for accessing the field via an interface.
func (v *updateDataSetUpdateDataSet) GetName() string { return v.Name }

// GetDescription returns updateDataSetUpdateDataSet.Description, and is useful for accessing the field via an interface.
func (v *updateDataSetUpdateDataSet) GetDescription() string { return v.Description }

// GetIconType returns updateDataSetUpdateDataSet.IconType, and is useful for accessing the field via an interface.
func (v *updateDataSetUpdateDataSet) GetIconType() string { return v.IconType }

// The mutation executed by createDataSet.
const createDataSet_Operation = `
mutation createDataSet ($dataSetCreate: InputDataSetCreate!) {
	createDataSet(dataSetCreate: $dataSetCreate) {
		id
		name
		description
		iconType
	}
}
`

func createDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	dataSetCreate InputDataSetCreate,
) (data_ *createDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "createDataSet",
		Query:  createDataSet_Operation,
		Variables: &__createDataSetInput{
			DataSetCreate: dataSetCreate,
		},
	}

	data_ = &createDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by dataSets.
const dataSets_Operation = `
query dataSets {
	dataSets {
		count
		results {
			id
			name
			description
			iconType
		}
		total
	}
}
`

func dataSets(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *dataSetsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "dataSets",
		Query:  dataSets_Operation,
	}

	data_ = &dataSetsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by deleteDataSet.
const deleteDataSet_Operation = `
mutation deleteDataSet ($id: String!) {
	deleteDataSet(id: $id)
}
`

func deleteDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *deleteDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "deleteDataSet",
		Query:  deleteDataSet_Operation,
		Variables: &__deleteDataSetInput{
			Id: id,
		},
	}

	data_ = &deleteDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by updateDataSet.
const updateDataSet_Operation = `
mutation updateDataSet ($dataSetUpdate: InputDataSetUpdate!) {
	updateDataSet(dataSetUpdate: $dataSetUpdate) {
		id
		name
		description
		iconType
	}
}
`

func updateDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	dataSetUpdate InputDataSetUpdate,
) (data_ *updateDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "updateDataSet",
		Query:  updateDataSet_Operation,
		Variables: &__updateDataSetInput{
			DataSetUpdate: dataSetUpdate,
		},
	}

	data_ = &updateDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
