// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CreateDataSetCreateDataSet includes the requested fields of the GraphQL type DataSet.
type CreateDataSetCreateDataSet struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType *string `json:"iconType"`
}

// GetId returns CreateDataSetCreateDataSet.Id, and is useful for accessing the field via an interface.
func (v *CreateDataSetCreateDataSet) GetId() string { return v.Id }

// GetName returns CreateDataSetCreateDataSet.Name, and is useful for accessing the field via an interface.
func (v *CreateDataSetCreateDataSet) GetName() string { return v.Name }

// GetDescription returns CreateDataSetCreateDataSet.Description, and is useful for accessing the field via an interface.
func (v *CreateDataSetCreateDataSet) GetDescription() *string { return v.Description }

// GetIconType returns CreateDataSetCreateDataSet.IconType, and is useful for accessing the field via an interface.
func (v *CreateDataSetCreateDataSet) GetIconType() *string { return v.IconType }

// CreateDataSetResponse is returned by CreateDataSet on success.
type CreateDataSetResponse struct {
	CreateDataSet CreateDataSetCreateDataSet `json:"createDataSet"`
}

// GetCreateDataSet returns CreateDataSetResponse.CreateDataSet, and is useful for accessing the field via an interface.
func (v *CreateDataSetResponse) GetCreateDataSet() CreateDataSetCreateDataSet { return v.CreateDataSet }

// CreateRateLimitingRuleCreateRateLimitingRule includes the requested fields of the GraphQL type RateLimitingRule.
// The GraphQL type's documentation follows.
//
// Custom rule to protect endpoints and other services from brute-force attacks
type CreateRateLimitingRuleCreateRateLimitingRule struct {
	RateLimitingRuleFields `json:"-"`
}

// GetCategory returns CreateRateLimitingRuleCreateRateLimitingRule.Category, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetCategory() RateLimitingRuleCategory {
	return v.RateLimitingRuleFields.Category
}

// GetDescription returns CreateRateLimitingRuleCreateRateLimitingRule.Description, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetDescription() *string {
	return v.RateLimitingRuleFields.Description
}

// GetEnabled returns CreateRateLimitingRuleCreateRateLimitingRule.Enabled, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetEnabled() bool {
	return v.RateLimitingRuleFields.Enabled
}

// GetId returns CreateRateLimitingRuleCreateRateLimitingRule.Id, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetId() string {
	return v.RateLimitingRuleFields.Id
}

// GetName returns CreateRateLimitingRuleCreateRateLimitingRule.Name, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetName() string {
	return v.RateLimitingRuleFields.Name
}

// GetLabels returns CreateRateLimitingRuleCreateRateLimitingRule.Labels, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetLabels() []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel {
	return v.RateLimitingRuleFields.Labels
}

// GetThresholdActionConfigs returns CreateRateLimitingRuleCreateRateLimitingRule.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetThresholdActionConfigs() []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig {
	return v.RateLimitingRuleFields.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns CreateRateLimitingRuleCreateRateLimitingRule.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetTransactionActionConfigs() *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig {
	return v.RateLimitingRuleFields.TransactionActionConfigs
}

// GetRuleConfigScope returns CreateRateLimitingRuleCreateRateLimitingRule.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetRuleConfigScope() *RateLimitingRuleFieldsRuleConfigScope {
	return v.RateLimitingRuleFields.RuleConfigScope
}

// GetRuleStatus returns CreateRateLimitingRuleCreateRateLimitingRule.RuleStatus, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetRuleStatus() *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus {
	return v.RateLimitingRuleFields.RuleStatus
}

// GetConditions returns CreateRateLimitingRuleCreateRateLimitingRule.Conditions, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleCreateRateLimitingRule) GetConditions() []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition {
	return v.RateLimitingRuleFields.Conditions
}

func (v *CreateRateLimitingRuleCreateRateLimitingRule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateRateLimitingRuleCreateRateLimitingRule
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateRateLimitingRuleCreateRateLimitingRule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RateLimitingRuleFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateRateLimitingRuleCreateRateLimitingRule struct {
	Category RateLimitingRuleCategory `json:"category"`

	Description *string `json:"description"`

	Enabled bool `json:"enabled"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel `json:"labels"`

	ThresholdActionConfigs []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`

	TransactionActionConfigs *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`

	RuleConfigScope *RateLimitingRuleFieldsRuleConfigScope `json:"ruleConfigScope"`

	RuleStatus *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus `json:"ruleStatus"`

	Conditions []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition `json:"conditions"`
}

func (v *CreateRateLimitingRuleCreateRateLimitingRule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateRateLimitingRuleCreateRateLimitingRule) __premarshalJSON() (*__premarshalCreateRateLimitingRuleCreateRateLimitingRule, error) {
	var retval __premarshalCreateRateLimitingRuleCreateRateLimitingRule

	retval.Category = v.RateLimitingRuleFields.Category
	retval.Description = v.RateLimitingRuleFields.Description
	retval.Enabled = v.RateLimitingRuleFields.Enabled
	retval.Id = v.RateLimitingRuleFields.Id
	retval.Name = v.RateLimitingRuleFields.Name
	retval.Labels = v.RateLimitingRuleFields.Labels
	retval.ThresholdActionConfigs = v.RateLimitingRuleFields.ThresholdActionConfigs
	retval.TransactionActionConfigs = v.RateLimitingRuleFields.TransactionActionConfigs
	retval.RuleConfigScope = v.RateLimitingRuleFields.RuleConfigScope
	retval.RuleStatus = v.RateLimitingRuleFields.RuleStatus
	retval.Conditions = v.RateLimitingRuleFields.Conditions
	return &retval, nil
}

// CreateRateLimitingRuleResponse is returned by CreateRateLimitingRule on success.
type CreateRateLimitingRuleResponse struct {
	CreateRateLimitingRule CreateRateLimitingRuleCreateRateLimitingRule `json:"createRateLimitingRule"`
}

// GetCreateRateLimitingRule returns CreateRateLimitingRuleResponse.CreateRateLimitingRule, and is useful for accessing the field via an interface.
func (v *CreateRateLimitingRuleResponse) GetCreateRateLimitingRule() CreateRateLimitingRuleCreateRateLimitingRule {
	return v.CreateRateLimitingRule
}

type DataSensitivity string

const (
	// LOW
	DataSensitivityLow DataSensitivity = "LOW"
	// MEDIUM
	DataSensitivityMedium DataSensitivity = "MEDIUM"
	// HIGH
	DataSensitivityHigh DataSensitivity = "HIGH"
	// CRITICAL
	DataSensitivityCritical DataSensitivity = "CRITICAL"
)

var AllDataSensitivity = []DataSensitivity{
	DataSensitivityLow,
	DataSensitivityMedium,
	DataSensitivityHigh,
	DataSensitivityCritical,
}

// DataSetsDataSetsDataSetResultSet includes the requested fields of the GraphQL type DataSetResultSet.
type DataSetsDataSetsDataSetResultSet struct {
	Count   int64                                             `json:"count"`
	Results []*DataSetsDataSetsDataSetResultSetResultsDataSet `json:"results"`
	Total   int64                                             `json:"total"`
}

// GetCount returns DataSetsDataSetsDataSetResultSet.Count, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSet) GetCount() int64 { return v.Count }

// GetResults returns DataSetsDataSetsDataSetResultSet.Results, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSet) GetResults() []*DataSetsDataSetsDataSetResultSetResultsDataSet {
	return v.Results
}

// GetTotal returns DataSetsDataSetsDataSetResultSet.Total, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSet) GetTotal() int64 { return v.Total }

// DataSetsDataSetsDataSetResultSetResultsDataSet includes the requested fields of the GraphQL type DataSet.
type DataSetsDataSetsDataSetResultSetResultsDataSet struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType *string `json:"iconType"`
}

// GetId returns DataSetsDataSetsDataSetResultSetResultsDataSet.Id, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSetResultsDataSet) GetId() string { return v.Id }

// GetName returns DataSetsDataSetsDataSetResultSetResultsDataSet.Name, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSetResultsDataSet) GetName() string { return v.Name }

// GetDescription returns DataSetsDataSetsDataSetResultSetResultsDataSet.Description, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSetResultsDataSet) GetDescription() *string {
	return v.Description
}

// GetIconType returns DataSetsDataSetsDataSetResultSetResultsDataSet.IconType, and is useful for accessing the field via an interface.
func (v *DataSetsDataSetsDataSetResultSetResultsDataSet) GetIconType() *string { return v.IconType }

// DataSetsResponse is returned by DataSets on success.
type DataSetsResponse struct {
	DataSets DataSetsDataSetsDataSetResultSet `json:"dataSets"`
}

// GetDataSets returns DataSetsResponse.DataSets, and is useful for accessing the field via an interface.
func (v *DataSetsResponse) GetDataSets() DataSetsDataSetsDataSetResultSet { return v.DataSets }

type DataSuppression string

const (
	// RAW
	DataSuppressionRaw DataSuppression = "RAW"
	// REDACT
	DataSuppressionRedact DataSuppression = "REDACT"
	// OBFUSCATE
	DataSuppressionObfuscate DataSuppression = "OBFUSCATE"
)

var AllDataSuppression = []DataSuppression{
	DataSuppressionRaw,
	DataSuppressionRedact,
	DataSuppressionObfuscate,
}

// DeleteDataSetResponse is returned by DeleteDataSet on success.
type DeleteDataSetResponse struct {
	DeleteDataSet bool `json:"deleteDataSet"`
}

// GetDeleteDataSet returns DeleteDataSetResponse.DeleteDataSet, and is useful for accessing the field via an interface.
func (v *DeleteDataSetResponse) GetDeleteDataSet() bool { return v.DeleteDataSet }

// DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse includes the requested fields of the GraphQL type DeleteRateLimitingRuleResponse.
type DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse struct {
	Success bool `json:"success"`
}

// GetSuccess returns DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse.Success, and is useful for accessing the field via an interface.
func (v *DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse) GetSuccess() bool {
	return v.Success
}

// DeleteRateLimitingRuleResponse is returned by DeleteRateLimitingRule on success.
type DeleteRateLimitingRuleResponse struct {
	DeleteRateLimitingRule DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse `json:"deleteRateLimitingRule"`
}

// GetDeleteRateLimitingRule returns DeleteRateLimitingRuleResponse.DeleteRateLimitingRule, and is useful for accessing the field via an interface.
func (v *DeleteRateLimitingRuleResponse) GetDeleteRateLimitingRule() DeleteRateLimitingRuleDeleteRateLimitingRuleDeleteRateLimitingRuleResponse {
	return v.DeleteRateLimitingRule
}

// GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet includes the requested fields of the GraphQL type RateLimitingRuleResultSet.
type GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet struct {
	Count   int64                                                                                      `json:"count"`
	Total   int64                                                                                      `json:"total"`
	Results []*GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule `json:"results"`
}

// GetCount returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet.Count, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet) GetCount() int64 {
	return v.Count
}

// GetTotal returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet.Total, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet) GetTotal() int64 {
	return v.Total
}

// GetResults returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet.Results, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet) GetResults() []*GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule {
	return v.Results
}

// GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule includes the requested fields of the GraphQL type RateLimitingRule.
// The GraphQL type's documentation follows.
//
// Custom rule to protect endpoints and other services from brute-force attacks
type GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule struct {
	RateLimitingRuleFields `json:"-"`
}

// GetCategory returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Category, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetCategory() RateLimitingRuleCategory {
	return v.RateLimitingRuleFields.Category
}

// GetDescription returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Description, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetDescription() *string {
	return v.RateLimitingRuleFields.Description
}

// GetEnabled returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Enabled, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetEnabled() bool {
	return v.RateLimitingRuleFields.Enabled
}

// GetId returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Id, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetId() string {
	return v.RateLimitingRuleFields.Id
}

// GetName returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Name, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetName() string {
	return v.RateLimitingRuleFields.Name
}

// GetLabels returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Labels, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetLabels() []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel {
	return v.RateLimitingRuleFields.Labels
}

// GetThresholdActionConfigs returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetThresholdActionConfigs() []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig {
	return v.RateLimitingRuleFields.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetTransactionActionConfigs() *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig {
	return v.RateLimitingRuleFields.TransactionActionConfigs
}

// GetRuleConfigScope returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetRuleConfigScope() *RateLimitingRuleFieldsRuleConfigScope {
	return v.RateLimitingRuleFields.RuleConfigScope
}

// GetRuleStatus returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.RuleStatus, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetRuleStatus() *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus {
	return v.RateLimitingRuleFields.RuleStatus
}

// GetConditions returns GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Conditions, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetConditions() []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition {
	return v.RateLimitingRuleFields.Conditions
}

func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RateLimitingRuleFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule struct {
	Category RateLimitingRuleCategory `json:"category"`

	Description *string `json:"description"`

	Enabled bool `json:"enabled"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel `json:"labels"`

	ThresholdActionConfigs []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`

	TransactionActionConfigs *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`

	RuleConfigScope *RateLimitingRuleFieldsRuleConfigScope `json:"ruleConfigScope"`

	RuleStatus *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus `json:"ruleStatus"`

	Conditions []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition `json:"conditions"`
}

func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) __premarshalJSON() (*__premarshalGetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule, error) {
	var retval __premarshalGetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule

	retval.Category = v.RateLimitingRuleFields.Category
	retval.Description = v.RateLimitingRuleFields.Description
	retval.Enabled = v.RateLimitingRuleFields.Enabled
	retval.Id = v.RateLimitingRuleFields.Id
	retval.Name = v.RateLimitingRuleFields.Name
	retval.Labels = v.RateLimitingRuleFields.Labels
	retval.ThresholdActionConfigs = v.RateLimitingRuleFields.ThresholdActionConfigs
	retval.TransactionActionConfigs = v.RateLimitingRuleFields.TransactionActionConfigs
	retval.RuleConfigScope = v.RateLimitingRuleFields.RuleConfigScope
	retval.RuleStatus = v.RateLimitingRuleFields.RuleStatus
	retval.Conditions = v.RateLimitingRuleFields.Conditions
	return &retval, nil
}

// GetRateLimitingDetailsResponse is returned by GetRateLimitingDetails on success.
type GetRateLimitingDetailsResponse struct {
	RateLimitingRules GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet `json:"rateLimitingRules"`
}

// GetRateLimitingRules returns GetRateLimitingDetailsResponse.RateLimitingRules, and is useful for accessing the field via an interface.
func (v *GetRateLimitingDetailsResponse) GetRateLimitingRules() GetRateLimitingDetailsRateLimitingRulesRateLimitingRuleResultSet {
	return v.RateLimitingRules
}

// GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet includes the requested fields of the GraphQL type RateLimitingRuleResultSet.
type GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet struct {
	Count   int64                                                                                        `json:"count"`
	Total   int64                                                                                        `json:"total"`
	Results []*GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule `json:"results"`
}

// GetCount returns GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet.Count, and is useful for accessing the field via an interface.
func (v *GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet) GetCount() int64 {
	return v.Count
}

// GetTotal returns GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet.Total, and is useful for accessing the field via an interface.
func (v *GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet) GetTotal() int64 {
	return v.Total
}

// GetResults returns GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet.Results, and is useful for accessing the field via an interface.
func (v *GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet) GetResults() []*GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule {
	return v.Results
}

// GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule includes the requested fields of the GraphQL type RateLimitingRule.
// The GraphQL type's documentation follows.
//
// Custom rule to protect endpoints and other services from brute-force attacks
type GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule struct {
	// Rate limit rule name
	Name string `json:"name"`
}

// GetName returns GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule.Name, and is useful for accessing the field via an interface.
func (v *GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSetResultsRateLimitingRule) GetName() string {
	return v.Name
}

// GetRateLimitingRulesNameResponse is returned by GetRateLimitingRulesName on success.
type GetRateLimitingRulesNameResponse struct {
	RateLimitingRules GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet `json:"rateLimitingRules"`
}

// GetRateLimitingRules returns GetRateLimitingRulesNameResponse.RateLimitingRules, and is useful for accessing the field via an interface.
func (v *GetRateLimitingRulesNameResponse) GetRateLimitingRules() GetRateLimitingRulesNameRateLimitingRulesRateLimitingRuleResultSet {
	return v.RateLimitingRules
}

type InputDataSetCreate struct {
	Color           *string          `json:"color"`
	DataSuppression *DataSuppression `json:"dataSuppression"`
	DataTypeIds     []*string        `json:"dataTypeIds"`
	Description     *string          `json:"description"`
	Enabled         *bool            `json:"enabled"`
	IconType        *string          `json:"iconType"`
	Name            string           `json:"name"`
	Sensitivity     *DataSensitivity `json:"sensitivity"`
}

// GetColor returns InputDataSetCreate.Color, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetColor() *string { return v.Color }

// GetDataSuppression returns InputDataSetCreate.DataSuppression, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetDataSuppression() *DataSuppression { return v.DataSuppression }

// GetDataTypeIds returns InputDataSetCreate.DataTypeIds, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetDataTypeIds() []*string { return v.DataTypeIds }

// GetDescription returns InputDataSetCreate.Description, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetDescription() *string { return v.Description }

// GetEnabled returns InputDataSetCreate.Enabled, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetEnabled() *bool { return v.Enabled }

// GetIconType returns InputDataSetCreate.IconType, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetIconType() *string { return v.IconType }

// GetName returns InputDataSetCreate.Name, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetName() string { return v.Name }

// GetSensitivity returns InputDataSetCreate.Sensitivity, and is useful for accessing the field via an interface.
func (v *InputDataSetCreate) GetSensitivity() *DataSensitivity { return v.Sensitivity }

type InputDataSetUpdate struct {
	Color           *string          `json:"color"`
	DataSuppression *DataSuppression `json:"dataSuppression"`
	DataTypeIds     []*string        `json:"dataTypeIds"`
	Description     *string          `json:"description"`
	Enabled         *bool            `json:"enabled"`
	IconType        *string          `json:"iconType"`
	Id              string           `json:"id"`
	Name            string           `json:"name"`
	Sensitivity     *DataSensitivity `json:"sensitivity"`
}

// GetColor returns InputDataSetUpdate.Color, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetColor() *string { return v.Color }

// GetDataSuppression returns InputDataSetUpdate.DataSuppression, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetDataSuppression() *DataSuppression { return v.DataSuppression }

// GetDataTypeIds returns InputDataSetUpdate.DataTypeIds, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetDataTypeIds() []*string { return v.DataTypeIds }

// GetDescription returns InputDataSetUpdate.Description, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetDescription() *string { return v.Description }

// GetEnabled returns InputDataSetUpdate.Enabled, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetEnabled() *bool { return v.Enabled }

// GetIconType returns InputDataSetUpdate.IconType, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetIconType() *string { return v.IconType }

// GetId returns InputDataSetUpdate.Id, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetId() string { return v.Id }

// GetName returns InputDataSetUpdate.Name, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetName() string { return v.Name }

// GetSensitivity returns InputDataSetUpdate.Sensitivity, and is useful for accessing the field via an interface.
func (v *InputDataSetUpdate) GetSensitivity() *DataSensitivity { return v.Sensitivity }

// Threshold config which specifies percentage allowed exceeding a mean countwhich
// is calculated over the specified duration for the given time range
type InputDynamicThresholdConfig struct {
	// Time range over which mean and counts are calculated
	Duration string `json:"duration"`
	// Duration for calculating mean over the specified time range
	MeanCalculationDuration string `json:"meanCalculationDuration"`
	// Allowed percentage exceeding mean
	PercentageExceedingMeanAllowed int64 `json:"percentageExceedingMeanAllowed"`
}

// GetDuration returns InputDynamicThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *InputDynamicThresholdConfig) GetDuration() string { return v.Duration }

// GetMeanCalculationDuration returns InputDynamicThresholdConfig.MeanCalculationDuration, and is useful for accessing the field via an interface.
func (v *InputDynamicThresholdConfig) GetMeanCalculationDuration() string {
	return v.MeanCalculationDuration
}

// GetPercentageExceedingMeanAllowed returns InputDynamicThresholdConfig.PercentageExceedingMeanAllowed, and is useful for accessing the field via an interface.
func (v *InputDynamicThresholdConfig) GetPercentageExceedingMeanAllowed() int64 {
	return v.PercentageExceedingMeanAllowed
}

// Environment scope applicable for rate limit rule
type InputEnvironmentScope struct {
	// List of environment ids applicable for rate limit rule
	EnvironmentIds []*string `json:"environmentIds"`
}

// GetEnvironmentIds returns InputEnvironmentScope.EnvironmentIds, and is useful for accessing the field via an interface.
func (v *InputEnvironmentScope) GetEnvironmentIds() []*string { return v.EnvironmentIds }

// Region identifier schema for rate limit region condition
type InputRateLimitingRegionIdentifier struct {
	// Country ISO code for region identifier
	CountryIsoCode string `json:"countryIsoCode"`
}

// GetCountryIsoCode returns InputRateLimitingRegionIdentifier.CountryIsoCode, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRegionIdentifier) GetCountryIsoCode() string { return v.CountryIsoCode }

// Custom rule to protect endpoints and other services from brute-force attacks
type InputRateLimitingRule struct {
	// Rate limit rule ID
	Id string `json:"id"`
	// Rate limit rule category
	Category RateLimitingRuleCategory `json:"category"`
	// List of rate limit rule conditions
	Conditions []*InputRateLimitingRuleCondition `json:"conditions"`
	// Rate limit rule description
	Description *string `json:"description"`
	// Rate limit rule enabled status
	Enabled bool `json:"enabled"`
	// Rate limit rule custom labels
	Labels []*InputRateLimitingRuleLabel `json:"labels"`
	// Rate limit rule name
	Name string `json:"name"`
	// Rate limit rule condition
	RateLimitingRuleCondition *InputRateLimitingRuleCondition `json:"rateLimitingRuleCondition"`
	// Rate limit rule scope
	RuleConfigScope *InputRuleConfigScope `json:"ruleConfigScope"`
	// Rate limit rule status
	RuleStatus *InputRateLimitingRuleStatus `json:"ruleStatus"`
	// List of configs containing thresholds and actions for a rate limit rule
	ThresholdActionConfigs []*InputRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`
	// Transaction action config for DLP rule
	TransactionActionConfigs *InputRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`
}

// GetId returns InputRateLimitingRule.Id, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetId() string { return v.Id }

// GetCategory returns InputRateLimitingRule.Category, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetCategory() RateLimitingRuleCategory { return v.Category }

// GetConditions returns InputRateLimitingRule.Conditions, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetConditions() []*InputRateLimitingRuleCondition {
	return v.Conditions
}

// GetDescription returns InputRateLimitingRule.Description, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetDescription() *string { return v.Description }

// GetEnabled returns InputRateLimitingRule.Enabled, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetEnabled() bool { return v.Enabled }

// GetLabels returns InputRateLimitingRule.Labels, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetLabels() []*InputRateLimitingRuleLabel { return v.Labels }

// GetName returns InputRateLimitingRule.Name, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetName() string { return v.Name }

// GetRateLimitingRuleCondition returns InputRateLimitingRule.RateLimitingRuleCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetRateLimitingRuleCondition() *InputRateLimitingRuleCondition {
	return v.RateLimitingRuleCondition
}

// GetRuleConfigScope returns InputRateLimitingRule.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetRuleConfigScope() *InputRuleConfigScope { return v.RuleConfigScope }

// GetRuleStatus returns InputRateLimitingRule.RuleStatus, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetRuleStatus() *InputRateLimitingRuleStatus { return v.RuleStatus }

// GetThresholdActionConfigs returns InputRateLimitingRule.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetThresholdActionConfigs() []*InputRateLimitingRuleThresholdActionConfig {
	return v.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns InputRateLimitingRule.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRule) GetTransactionActionConfigs() *InputRateLimitingTransactionActionConfig {
	return v.TransactionActionConfigs
}

// Action to take if a rate limit rule is applicable
type InputRateLimitingRuleAction struct {
	// Type of action
	ActionType RateLimitingRuleActionType `json:"actionType"`
	// Details regarding alert action
	Alert *InputRateLimitingRuleAlertAction `json:"alert"`
	// Details regarding allow action
	Allow *InputRateLimitingRuleAllowAction `json:"allow"`
	// Details regarding block action
	Block *InputRateLimitingRuleBlockAction `json:"block"`
	// Details regarding mark for testing action
	MarkForTesting *InputRateLimitingRuleMarkForTestingAction `json:"markForTesting"`
}

// GetActionType returns InputRateLimitingRuleAction.ActionType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAction) GetActionType() RateLimitingRuleActionType { return v.ActionType }

// GetAlert returns InputRateLimitingRuleAction.Alert, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAction) GetAlert() *InputRateLimitingRuleAlertAction { return v.Alert }

// GetAllow returns InputRateLimitingRuleAction.Allow, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAction) GetAllow() *InputRateLimitingRuleAllowAction { return v.Allow }

// GetBlock returns InputRateLimitingRuleAction.Block, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAction) GetBlock() *InputRateLimitingRuleBlockAction { return v.Block }

// GetMarkForTesting returns InputRateLimitingRuleAction.MarkForTesting, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAction) GetMarkForTesting() *InputRateLimitingRuleMarkForTestingAction {
	return v.MarkForTesting
}

// Details regarding agent effect applicable on a rate limit rule
type InputRateLimitingRuleAgentEffect struct {
	// List of agent modifications to be done as part of rate limiting rule action
	AgentModifications []*InputRateLimitingRuleAgentModification `json:"agentModifications"`
}

// GetAgentModifications returns InputRateLimitingRuleAgentEffect.AgentModifications, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAgentEffect) GetAgentModifications() []*InputRateLimitingRuleAgentModification {
	return v.AgentModifications
}

// Details regarding agent modification applicable on a rate limit rule
type InputRateLimitingRuleAgentModification struct {
	// Type of agent modification to be performed
	AgentModificationType RateLimitingRuleAgentModificationType `json:"agentModificationType"`
	// Details of header injection action
	HeaderInjection InputRateLimitingRuleHeaderInjection `json:"headerInjection"`
}

// GetAgentModificationType returns InputRateLimitingRuleAgentModification.AgentModificationType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAgentModification) GetAgentModificationType() RateLimitingRuleAgentModificationType {
	return v.AgentModificationType
}

// GetHeaderInjection returns InputRateLimitingRuleAgentModification.HeaderInjection, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAgentModification) GetHeaderInjection() InputRateLimitingRuleHeaderInjection {
	return v.HeaderInjection
}

// Details regarding alert action applicable on a rate limit rule
type InputRateLimitingRuleAlertAction struct {
	// Agent effect associated with this action
	AgentEffect *InputRateLimitingRuleAgentEffect `json:"agentEffect"`
	// Severity of alert to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
}

// GetAgentEffect returns InputRateLimitingRuleAlertAction.AgentEffect, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAlertAction) GetAgentEffect() *InputRateLimitingRuleAgentEffect {
	return v.AgentEffect
}

// GetEventSeverity returns InputRateLimitingRuleAlertAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAlertAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// Details regarding allow action applicable on a rate limit rule
type InputRateLimitingRuleAllowAction struct {
	// Duration to allow the malicious actor
	Duration *string `json:"duration"`
}

// GetDuration returns InputRateLimitingRuleAllowAction.Duration, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleAllowAction) GetDuration() *string { return v.Duration }

// Details regarding block action applicable on a rate limit rule
type InputRateLimitingRuleBlockAction struct {
	// Duration to block the malicious actor
	Duration *string `json:"duration"`
	// Severity of blocked event to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
	// Use duration in threshold config
	UseThresholdDuration *bool `json:"useThresholdDuration"`
}

// GetDuration returns InputRateLimitingRuleBlockAction.Duration, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleBlockAction) GetDuration() *string { return v.Duration }

// GetEventSeverity returns InputRateLimitingRuleBlockAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleBlockAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// GetUseThresholdDuration returns InputRateLimitingRuleBlockAction.UseThresholdDuration, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleBlockAction) GetUseThresholdDuration() *bool {
	return v.UseThresholdDuration
}

// Condition applicable for a rate limit rule
type InputRateLimitingRuleCondition struct {
	// RateLimitingRuleCondition type
	ConditionType *RateLimitingRuleConditionType `json:"conditionType"`
	// Rate limit rule leaf condition
	LeafCondition *InputRateLimitingRuleLeafCondition `json:"leafCondition"`
	// Rate limit rule logical condition
	LogicalCondition *InputRateLimitingRuleLogicalCondition `json:"logicalCondition"`
}

// GetConditionType returns InputRateLimitingRuleCondition.ConditionType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleCondition) GetConditionType() *RateLimitingRuleConditionType {
	return v.ConditionType
}

// GetLeafCondition returns InputRateLimitingRuleCondition.LeafCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleCondition) GetLeafCondition() *InputRateLimitingRuleLeafCondition {
	return v.LeafCondition
}

// GetLogicalCondition returns InputRateLimitingRuleCondition.LogicalCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleCondition) GetLogicalCondition() *InputRateLimitingRuleLogicalCondition {
	return v.LogicalCondition
}

// Details regarding rate limit rule
type InputRateLimitingRuleData struct {
	// Rate limit rule category
	Category RateLimitingRuleCategory `json:"category"`
	// List of rate limit rule conditions
	Conditions []*InputRateLimitingRuleCondition `json:"conditions"`
	// Rate limit rule description
	Description *string `json:"description"`
	// Rate limit rule enabled status
	Enabled bool `json:"enabled"`
	// Rate limit rule custom labels
	Labels []*InputRateLimitingRuleLabel `json:"labels"`
	// Rate limit rule name
	Name string `json:"name"`
	// Rate limit rule condition
	RateLimitingRuleCondition *InputRateLimitingRuleCondition `json:"rateLimitingRuleCondition"`
	// Rate limit rule scope
	RuleConfigScope *InputRuleConfigScope `json:"ruleConfigScope"`
	// Rate limit rule status
	RuleStatus *InputRateLimitingRuleStatus `json:"ruleStatus"`
	// List of configs containing thresholds and actions for a rate limit rule
	ThresholdActionConfigs []*InputRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`
	// Transaction action config for a rate limit rule
	TransactionActionConfigs *InputRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`
}

// GetCategory returns InputRateLimitingRuleData.Category, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetCategory() RateLimitingRuleCategory { return v.Category }

// GetConditions returns InputRateLimitingRuleData.Conditions, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetConditions() []*InputRateLimitingRuleCondition {
	return v.Conditions
}

// GetDescription returns InputRateLimitingRuleData.Description, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetDescription() *string { return v.Description }

// GetEnabled returns InputRateLimitingRuleData.Enabled, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetEnabled() bool { return v.Enabled }

// GetLabels returns InputRateLimitingRuleData.Labels, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetLabels() []*InputRateLimitingRuleLabel { return v.Labels }

// GetName returns InputRateLimitingRuleData.Name, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetName() string { return v.Name }

// GetRateLimitingRuleCondition returns InputRateLimitingRuleData.RateLimitingRuleCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetRateLimitingRuleCondition() *InputRateLimitingRuleCondition {
	return v.RateLimitingRuleCondition
}

// GetRuleConfigScope returns InputRateLimitingRuleData.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetRuleConfigScope() *InputRuleConfigScope {
	return v.RuleConfigScope
}

// GetRuleStatus returns InputRateLimitingRuleData.RuleStatus, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetRuleStatus() *InputRateLimitingRuleStatus { return v.RuleStatus }

// GetThresholdActionConfigs returns InputRateLimitingRuleData.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetThresholdActionConfigs() []*InputRateLimitingRuleThresholdActionConfig {
	return v.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns InputRateLimitingRuleData.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleData) GetTransactionActionConfigs() *InputRateLimitingTransactionActionConfig {
	return v.TransactionActionConfigs
}

// Dataset and datatype condition for a rate limit rule
type InputRateLimitingRuleDatatypeCondition struct {
	// data location type
	DataLocation *RateLimitingRuleDataLocation `json:"dataLocation"`
	// List of data sensitivity levels
	DataSensitivityLevels []*RateLimitingRuleDataSensitivityLevel `json:"dataSensitivityLevels"`
	// List of dataset ids applicable
	DatasetIds []*string `json:"datasetIds"`
	// List of datatype ids applicable
	DatatypeIds []*string `json:"datatypeIds"`
	// datatype matching
	DatatypeMatching *InputRateLimitingRuleDatatypeMatching `json:"datatypeMatching"`
}

// GetDataLocation returns InputRateLimitingRuleDatatypeCondition.DataLocation, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeCondition) GetDataLocation() *RateLimitingRuleDataLocation {
	return v.DataLocation
}

// GetDataSensitivityLevels returns InputRateLimitingRuleDatatypeCondition.DataSensitivityLevels, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeCondition) GetDataSensitivityLevels() []*RateLimitingRuleDataSensitivityLevel {
	return v.DataSensitivityLevels
}

// GetDatasetIds returns InputRateLimitingRuleDatatypeCondition.DatasetIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeCondition) GetDatasetIds() []*string { return v.DatasetIds }

// GetDatatypeIds returns InputRateLimitingRuleDatatypeCondition.DatatypeIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeCondition) GetDatatypeIds() []*string { return v.DatatypeIds }

// GetDatatypeMatching returns InputRateLimitingRuleDatatypeCondition.DatatypeMatching, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeCondition) GetDatatypeMatching() *InputRateLimitingRuleDatatypeMatching {
	return v.DatatypeMatching
}

// Rate limiting datatype matching
type InputRateLimitingRuleDatatypeMatching struct {
	// datatype matching type
	DatatypeMatchingType *RateLimitingRuleDatatypeMatchingType `json:"datatypeMatchingType"`
	// regex based matching
	RegexBasedMatching *InputRateLimitingRuleRegexBasedMatching `json:"regexBasedMatching"`
}

// GetDatatypeMatchingType returns InputRateLimitingRuleDatatypeMatching.DatatypeMatchingType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeMatching) GetDatatypeMatchingType() *RateLimitingRuleDatatypeMatchingType {
	return v.DatatypeMatchingType
}

// GetRegexBasedMatching returns InputRateLimitingRuleDatatypeMatching.RegexBasedMatching, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleDatatypeMatching) GetRegexBasedMatching() *InputRateLimitingRuleRegexBasedMatching {
	return v.RegexBasedMatching
}

// Email domain condition for a rate limit rule
type InputRateLimitingRuleEmailDomainCondition struct {
	// List of email domains
	EmailDomains []*string `json:"emailDomains"`
	// List of email regexes
	EmailRegexes []*string `json:"emailRegexes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetEmailDomains returns InputRateLimitingRuleEmailDomainCondition.EmailDomains, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleEmailDomainCondition) GetEmailDomains() []*string {
	return v.EmailDomains
}

// GetEmailRegexes returns InputRateLimitingRuleEmailDomainCondition.EmailRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleEmailDomainCondition) GetEmailRegexes() []*string {
	return v.EmailRegexes
}

// GetExclude returns InputRateLimitingRuleEmailDomainCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleEmailDomainCondition) GetExclude() *bool { return v.Exclude }

// Entity scope condition applicable on a rate limit rule
type InputRateLimitingRuleEntityScope struct {
	// List of entity ids applicable
	EntityIds []*string `json:"entityIds"`
	// Entity type
	EntityType RateLimitingRuleEntityType `json:"entityType"`
}

// GetEntityIds returns InputRateLimitingRuleEntityScope.EntityIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleEntityScope) GetEntityIds() []*string { return v.EntityIds }

// GetEntityType returns InputRateLimitingRuleEntityScope.EntityType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleEntityScope) GetEntityType() RateLimitingRuleEntityType {
	return v.EntityType
}

// Details regarding header injection applicable on a rate limit rule
type InputRateLimitingRuleHeaderInjection struct {
	// Category defining where the header needs to be injected
	HeaderCategory RateLimitingRuleMatchCategory `json:"headerCategory"`
	// Header name to be injected
	Key string `json:"key"`
	// Header value to be injected
	Value string `json:"value"`
}

// GetHeaderCategory returns InputRateLimitingRuleHeaderInjection.HeaderCategory, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleHeaderInjection) GetHeaderCategory() RateLimitingRuleMatchCategory {
	return v.HeaderCategory
}

// GetKey returns InputRateLimitingRuleHeaderInjection.Key, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleHeaderInjection) GetKey() string { return v.Key }

// GetValue returns InputRateLimitingRuleHeaderInjection.Value, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleHeaderInjection) GetValue() string { return v.Value }

// Ip abuse velocity condition applicable on a rate limit rule
type InputRateLimitingRuleIpAbuseVelocityCondition struct {
	// Minimum Ip abuse velocity applicable
	MinIpAbuseVelocity RateLimitingRuleIpAbuseVelocity `json:"minIpAbuseVelocity"`
}

// GetMinIpAbuseVelocity returns InputRateLimitingRuleIpAbuseVelocityCondition.MinIpAbuseVelocity, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAbuseVelocityCondition) GetMinIpAbuseVelocity() RateLimitingRuleIpAbuseVelocity {
	return v.MinIpAbuseVelocity
}

// IP address condition applicable on a rate limit rule
type InputRateLimitingRuleIpAddressCondition struct {
	// List of CIDR IP ranges
	CidrIpRanges []*string `json:"cidrIpRanges"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// ip address condition type
	IpAddressConditionType *RateLimitingRuleIpAddressConditionType `json:"ipAddressConditionType"`
	// List of IP addresses
	IpAddresses []*string `json:"ipAddresses"`
	// List of IP addresses and CIDR IP ranges
	RawInputIpData []*string `json:"rawInputIpData"`
}

// GetCidrIpRanges returns InputRateLimitingRuleIpAddressCondition.CidrIpRanges, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAddressCondition) GetCidrIpRanges() []*string { return v.CidrIpRanges }

// GetExclude returns InputRateLimitingRuleIpAddressCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAddressCondition) GetExclude() *bool { return v.Exclude }

// GetIpAddressConditionType returns InputRateLimitingRuleIpAddressCondition.IpAddressConditionType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAddressCondition) GetIpAddressConditionType() *RateLimitingRuleIpAddressConditionType {
	return v.IpAddressConditionType
}

// GetIpAddresses returns InputRateLimitingRuleIpAddressCondition.IpAddresses, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAddressCondition) GetIpAddresses() []*string { return v.IpAddresses }

// GetRawInputIpData returns InputRateLimitingRuleIpAddressCondition.RawInputIpData, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAddressCondition) GetRawInputIpData() []*string {
	return v.RawInputIpData
}

// Ip asn condition for a rate limit rule
type InputRateLimitingRuleIpAsnCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of ip asn regexes
	IpAsnRegexes []*string `json:"ipAsnRegexes"`
}

// GetExclude returns InputRateLimitingRuleIpAsnCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAsnCondition) GetExclude() *bool { return v.Exclude }

// GetIpAsnRegexes returns InputRateLimitingRuleIpAsnCondition.IpAsnRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpAsnCondition) GetIpAsnRegexes() []*string { return v.IpAsnRegexes }

// IP connection type condition for a rate limit rule
type InputRateLimitingRuleIpConnectionTypeCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of ip connection types
	IpConnectionTypes []*RateLimitingRuleIpConnectionType `json:"ipConnectionTypes"`
}

// GetExclude returns InputRateLimitingRuleIpConnectionTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpConnectionTypeCondition) GetExclude() *bool { return v.Exclude }

// GetIpConnectionTypes returns InputRateLimitingRuleIpConnectionTypeCondition.IpConnectionTypes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpConnectionTypeCondition) GetIpConnectionTypes() []*RateLimitingRuleIpConnectionType {
	return v.IpConnectionTypes
}

// IP location type condition applicable on a rate limit rule
type InputRateLimitingRuleIpLocationTypeCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of IP locations types applicable
	IpLocationTypes []*RateLimitingRuleIpLocationType `json:"ipLocationTypes"`
}

// GetExclude returns InputRateLimitingRuleIpLocationTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpLocationTypeCondition) GetExclude() *bool { return v.Exclude }

// GetIpLocationTypes returns InputRateLimitingRuleIpLocationTypeCondition.IpLocationTypes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpLocationTypeCondition) GetIpLocationTypes() []*RateLimitingRuleIpLocationType {
	return v.IpLocationTypes
}

// Ip organisation condition for a rate limit rule
type InputRateLimitingRuleIpOrganisationCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of ip organisation regexes
	IpOrganisationRegexes []*string `json:"ipOrganisationRegexes"`
}

// GetExclude returns InputRateLimitingRuleIpOrganisationCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpOrganisationCondition) GetExclude() *bool { return v.Exclude }

// GetIpOrganisationRegexes returns InputRateLimitingRuleIpOrganisationCondition.IpOrganisationRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpOrganisationCondition) GetIpOrganisationRegexes() []*string {
	return v.IpOrganisationRegexes
}

// IP reputation condition applicable on a rate limit rule
type InputRateLimitingRuleIpReputationCondition struct {
	// Minimum IP reputation severity applicable
	MinIpReputationSeverity RateLimitingRuleIpReputationSeverity `json:"minIpReputationSeverity"`
}

// GetMinIpReputationSeverity returns InputRateLimitingRuleIpReputationCondition.MinIpReputationSeverity, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleIpReputationCondition) GetMinIpReputationSeverity() RateLimitingRuleIpReputationSeverity {
	return v.MinIpReputationSeverity
}

// Key value condition applicable on a rate limit rule
type InputRateLimitingRuleKeyValueCondition struct {
	// Key condition
	KeyCondition *InputRateLimitingRuleStringCondition `json:"keyCondition"`
	// Key value condition metadata type
	MetadataType RateLimitingRuleKeyValueConditionMetadataType `json:"metadataType"`
	// Value condition
	ValueCondition *InputRateLimitingRuleStringCondition `json:"valueCondition"`
}

// GetKeyCondition returns InputRateLimitingRuleKeyValueCondition.KeyCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleKeyValueCondition) GetKeyCondition() *InputRateLimitingRuleStringCondition {
	return v.KeyCondition
}

// GetMetadataType returns InputRateLimitingRuleKeyValueCondition.MetadataType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleKeyValueCondition) GetMetadataType() RateLimitingRuleKeyValueConditionMetadataType {
	return v.MetadataType
}

// GetValueCondition returns InputRateLimitingRuleKeyValueCondition.ValueCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleKeyValueCondition) GetValueCondition() *InputRateLimitingRuleStringCondition {
	return v.ValueCondition
}

// Key-value pair for labels
type InputRateLimitingRuleLabel struct {
	// Key
	Key string `json:"key"`
	// Value
	Value string `json:"value"`
}

// GetKey returns InputRateLimitingRuleLabel.Key, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLabel) GetKey() string { return v.Key }

// GetValue returns InputRateLimitingRuleLabel.Value, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLabel) GetValue() string { return v.Value }

// Label scope condition applicable on a rate limit rule
type InputRateLimitingRuleLabelScope struct {
	// List of label ids applicable
	LabelIds []*string `json:"labelIds"`
	// Label type
	LabelType RateLimitingRuleLabelType `json:"labelType"`
}

// GetLabelIds returns InputRateLimitingRuleLabelScope.LabelIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLabelScope) GetLabelIds() []*string { return v.LabelIds }

// GetLabelType returns InputRateLimitingRuleLabelScope.LabelType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLabelScope) GetLabelType() RateLimitingRuleLabelType {
	return v.LabelType
}

// Leaf condition applicable on a rate limit rule
type InputRateLimitingRuleLeafCondition struct {
	// Leaf condition type
	ConditionType RateLimitingRuleLeafConditionType `json:"conditionType"`
	// Dataset and datatype condition applicable on a rate limit rule
	DatatypeCondition *InputRateLimitingRuleDatatypeCondition `json:"datatypeCondition"`
	// Email domain condition applicable on a rate limit rule
	EmailDomainCondition *InputRateLimitingRuleEmailDomainCondition `json:"emailDomainCondition"`
	// Ip abuse velocity condition applicable on a rate limit rule
	IpAbuseVelocityCondition *InputRateLimitingRuleIpAbuseVelocityCondition `json:"ipAbuseVelocityCondition"`
	// IP address condition applicable on a rate limit rule
	IpAddressCondition *InputRateLimitingRuleIpAddressCondition `json:"ipAddressCondition"`
	// Ip asn condition applicable on a rate limit rule
	IpAsnCondition *InputRateLimitingRuleIpAsnCondition `json:"ipAsnCondition"`
	// IP connection type condition applicable on a rate limit rule
	IpConnectionTypeCondition *InputRateLimitingRuleIpConnectionTypeCondition `json:"ipConnectionTypeCondition"`
	// IP location type condition applicable on a rate limit rule
	IpLocationTypeCondition *InputRateLimitingRuleIpLocationTypeCondition `json:"ipLocationTypeCondition"`
	// Ip organisation condition applicable on a rate limit rule
	IpOrganisationCondition *InputRateLimitingRuleIpOrganisationCondition `json:"ipOrganisationCondition"`
	// IP reputation condition applicable on a rate limit rule
	IpReputationCondition *InputRateLimitingRuleIpReputationCondition `json:"ipReputationCondition"`
	// Key value condition applicable on a rate limit rule
	KeyValueCondition *InputRateLimitingRuleKeyValueCondition `json:"keyValueCondition"`
	// Region condition applicable on a rate limit rule
	RegionCondition *InputRateLimitingRuleRegionCondition `json:"regionCondition"`
	// Request scanner type condition applicable on a rate limit rule
	RequestScannerTypeCondition *InputRateLimitingRuleRequestScannerTypeCondition `json:"requestScannerTypeCondition"`
	// Scope condition applicable on a rate limit rule
	ScopeCondition *InputRateLimitingRuleScopeCondition `json:"scopeCondition"`
	// User agent condition applicable on a rate limit rule
	UserAgentCondition *InputRateLimitingRuleUserAgentCondition `json:"userAgentCondition"`
	// User ID condition applicable on a rate limit rule
	UserIdCondition *InputRateLimitingRuleUserIdCondition `json:"userIdCondition"`
}

// GetConditionType returns InputRateLimitingRuleLeafCondition.ConditionType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetConditionType() RateLimitingRuleLeafConditionType {
	return v.ConditionType
}

// GetDatatypeCondition returns InputRateLimitingRuleLeafCondition.DatatypeCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetDatatypeCondition() *InputRateLimitingRuleDatatypeCondition {
	return v.DatatypeCondition
}

// GetEmailDomainCondition returns InputRateLimitingRuleLeafCondition.EmailDomainCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetEmailDomainCondition() *InputRateLimitingRuleEmailDomainCondition {
	return v.EmailDomainCondition
}

// GetIpAbuseVelocityCondition returns InputRateLimitingRuleLeafCondition.IpAbuseVelocityCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpAbuseVelocityCondition() *InputRateLimitingRuleIpAbuseVelocityCondition {
	return v.IpAbuseVelocityCondition
}

// GetIpAddressCondition returns InputRateLimitingRuleLeafCondition.IpAddressCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpAddressCondition() *InputRateLimitingRuleIpAddressCondition {
	return v.IpAddressCondition
}

// GetIpAsnCondition returns InputRateLimitingRuleLeafCondition.IpAsnCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpAsnCondition() *InputRateLimitingRuleIpAsnCondition {
	return v.IpAsnCondition
}

// GetIpConnectionTypeCondition returns InputRateLimitingRuleLeafCondition.IpConnectionTypeCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpConnectionTypeCondition() *InputRateLimitingRuleIpConnectionTypeCondition {
	return v.IpConnectionTypeCondition
}

// GetIpLocationTypeCondition returns InputRateLimitingRuleLeafCondition.IpLocationTypeCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpLocationTypeCondition() *InputRateLimitingRuleIpLocationTypeCondition {
	return v.IpLocationTypeCondition
}

// GetIpOrganisationCondition returns InputRateLimitingRuleLeafCondition.IpOrganisationCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpOrganisationCondition() *InputRateLimitingRuleIpOrganisationCondition {
	return v.IpOrganisationCondition
}

// GetIpReputationCondition returns InputRateLimitingRuleLeafCondition.IpReputationCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetIpReputationCondition() *InputRateLimitingRuleIpReputationCondition {
	return v.IpReputationCondition
}

// GetKeyValueCondition returns InputRateLimitingRuleLeafCondition.KeyValueCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetKeyValueCondition() *InputRateLimitingRuleKeyValueCondition {
	return v.KeyValueCondition
}

// GetRegionCondition returns InputRateLimitingRuleLeafCondition.RegionCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetRegionCondition() *InputRateLimitingRuleRegionCondition {
	return v.RegionCondition
}

// GetRequestScannerTypeCondition returns InputRateLimitingRuleLeafCondition.RequestScannerTypeCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetRequestScannerTypeCondition() *InputRateLimitingRuleRequestScannerTypeCondition {
	return v.RequestScannerTypeCondition
}

// GetScopeCondition returns InputRateLimitingRuleLeafCondition.ScopeCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetScopeCondition() *InputRateLimitingRuleScopeCondition {
	return v.ScopeCondition
}

// GetUserAgentCondition returns InputRateLimitingRuleLeafCondition.UserAgentCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetUserAgentCondition() *InputRateLimitingRuleUserAgentCondition {
	return v.UserAgentCondition
}

// GetUserIdCondition returns InputRateLimitingRuleLeafCondition.UserIdCondition, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLeafCondition) GetUserIdCondition() *InputRateLimitingRuleUserIdCondition {
	return v.UserIdCondition
}

// Logical condition for a rate limited rule
type InputRateLimitingRuleLogicalCondition struct {
	// Child conditions of rate limit rule logical condition
	ChildRateLimitingRuleConditions []*InputRateLimitingRuleCondition `json:"childRateLimitingRuleConditions"`
	// Rate limit rule logical condition operator
	LogicalOperator LogicalOperator `json:"logicalOperator"`
}

// GetChildRateLimitingRuleConditions returns InputRateLimitingRuleLogicalCondition.ChildRateLimitingRuleConditions, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLogicalCondition) GetChildRateLimitingRuleConditions() []*InputRateLimitingRuleCondition {
	return v.ChildRateLimitingRuleConditions
}

// GetLogicalOperator returns InputRateLimitingRuleLogicalCondition.LogicalOperator, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleLogicalCondition) GetLogicalOperator() LogicalOperator {
	return v.LogicalOperator
}

// Details regarding mark for testing action applicable on a rate limit rule
type InputRateLimitingRuleMarkForTestingAction struct {
	// Agent effect associated with this action
	AgentEffect *InputRateLimitingRuleAgentEffect `json:"agentEffect"`
	// Severity of blocked event to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
}

// GetAgentEffect returns InputRateLimitingRuleMarkForTestingAction.AgentEffect, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleMarkForTestingAction) GetAgentEffect() *InputRateLimitingRuleAgentEffect {
	return v.AgentEffect
}

// GetEventSeverity returns InputRateLimitingRuleMarkForTestingAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleMarkForTestingAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// Rate limiting rule regex based matching
type InputRateLimitingRuleRegexBasedMatching struct {
	// custom matching location key value condition
	CustomMatchingLocation *InputRateLimitingRuleKeyValueCondition `json:"customMatchingLocation"`
}

// GetCustomMatchingLocation returns InputRateLimitingRuleRegexBasedMatching.CustomMatchingLocation, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRegexBasedMatching) GetCustomMatchingLocation() *InputRateLimitingRuleKeyValueCondition {
	return v.CustomMatchingLocation
}

// Region condition applicable on a rate limit rule
type InputRateLimitingRuleRegionCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of region identifiers
	RegionIdentifiers []*InputRateLimitingRegionIdentifier `json:"regionIdentifiers"`
	// List of regions
	Regions []*string `json:"regions"`
}

// GetExclude returns InputRateLimitingRuleRegionCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRegionCondition) GetExclude() *bool { return v.Exclude }

// GetRegionIdentifiers returns InputRateLimitingRuleRegionCondition.RegionIdentifiers, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRegionCondition) GetRegionIdentifiers() []*InputRateLimitingRegionIdentifier {
	return v.RegionIdentifiers
}

// GetRegions returns InputRateLimitingRuleRegionCondition.Regions, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRegionCondition) GetRegions() []*string { return v.Regions }

// Request scanner type condition for a rate limit rule
type InputRateLimitingRuleRequestScannerTypeCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of scanner types
	ScannerTypes []*string `json:"scannerTypes"`
}

// GetExclude returns InputRateLimitingRuleRequestScannerTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRequestScannerTypeCondition) GetExclude() *bool { return v.Exclude }

// GetScannerTypes returns InputRateLimitingRuleRequestScannerTypeCondition.ScannerTypes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleRequestScannerTypeCondition) GetScannerTypes() []*string {
	return v.ScannerTypes
}

// Scope condition applicable on a rate limit rule
type InputRateLimitingRuleScopeCondition struct {
	// Entity scope condition
	EntityScope *InputRateLimitingRuleEntityScope `json:"entityScope"`
	// Label scope condition
	LabelScope *InputRateLimitingRuleLabelScope `json:"labelScope"`
	// Scope condition type
	ScopeType RateLimitingRuleScopeConditionType `json:"scopeType"`
	// Url scope condition
	UrlScope *InputRateLimitingRuleUrlScope `json:"urlScope"`
}

// GetEntityScope returns InputRateLimitingRuleScopeCondition.EntityScope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleScopeCondition) GetEntityScope() *InputRateLimitingRuleEntityScope {
	return v.EntityScope
}

// GetLabelScope returns InputRateLimitingRuleScopeCondition.LabelScope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleScopeCondition) GetLabelScope() *InputRateLimitingRuleLabelScope {
	return v.LabelScope
}

// GetScopeType returns InputRateLimitingRuleScopeCondition.ScopeType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleScopeCondition) GetScopeType() RateLimitingRuleScopeConditionType {
	return v.ScopeType
}

// GetUrlScope returns InputRateLimitingRuleScopeCondition.UrlScope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleScopeCondition) GetUrlScope() *InputRateLimitingRuleUrlScope {
	return v.UrlScope
}

// Status of rate limit rule
type InputRateLimitingRuleStatus struct {
	// Boolean denoting if rule should generate internal events
	GenerateInternalEvents *bool `json:"generateInternalEvents"`
	// Boolean denoting if rule should be hidden
	Hidden *bool `json:"hidden"`
	// Boolean denoting if rule should be internal and generate internal events
	Internal *bool `json:"internal"`
	// Source of rule creation
	RuleCreationSource *RateLimitingRuleSource `json:"ruleCreationSource"`
}

// GetGenerateInternalEvents returns InputRateLimitingRuleStatus.GenerateInternalEvents, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStatus) GetGenerateInternalEvents() *bool {
	return v.GenerateInternalEvents
}

// GetHidden returns InputRateLimitingRuleStatus.Hidden, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStatus) GetHidden() *bool { return v.Hidden }

// GetInternal returns InputRateLimitingRuleStatus.Internal, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStatus) GetInternal() *bool { return v.Internal }

// GetRuleCreationSource returns InputRateLimitingRuleStatus.RuleCreationSource, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStatus) GetRuleCreationSource() *RateLimitingRuleSource {
	return v.RuleCreationSource
}

// String condition which matches a string value using the specified operator
type InputRateLimitingRuleStringCondition struct {
	// Operator to be used to match the string value
	Operator RateLimitingRuleKeyValueMatchOperator `json:"operator"`
	// String value to be matched
	Value string `json:"value"`
}

// GetOperator returns InputRateLimitingRuleStringCondition.Operator, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStringCondition) GetOperator() RateLimitingRuleKeyValueMatchOperator {
	return v.Operator
}

// GetValue returns InputRateLimitingRuleStringCondition.Value, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleStringCondition) GetValue() string { return v.Value }

// Config for thresholds and actions applicable on a rate limit rule
type InputRateLimitingRuleThresholdActionConfig struct {
	// List of rate limit rule actions
	Actions []*InputRateLimitingRuleAction `json:"actions"`
	// List of rate limit rule threshold configs
	ThresholdConfigs []*InputRateLimitingRuleThresholdConfig `json:"thresholdConfigs"`
}

// GetActions returns InputRateLimitingRuleThresholdActionConfig.Actions, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdActionConfig) GetActions() []*InputRateLimitingRuleAction {
	return v.Actions
}

// GetThresholdConfigs returns InputRateLimitingRuleThresholdActionConfig.ThresholdConfigs, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdActionConfig) GetThresholdConfigs() []*InputRateLimitingRuleThresholdConfig {
	return v.ThresholdConfigs
}

// Threshold config for rate limit rule
type InputRateLimitingRuleThresholdConfig struct {
	// API aggregation type
	ApiAggregateType RateLimitingRuleApiAggregateType `json:"apiAggregateType"`
	// Dynamic threshold config
	DynamicThresholdConfig *InputDynamicThresholdConfig `json:"dynamicThresholdConfig"`
	// Rolling window threshold config
	RollingWindowThresholdConfig *InputRollingWindowThresholdConfig `json:"rollingWindowThresholdConfig"`
	// Threshold config type
	ThresholdConfigType RateLimitingRuleThresholdConfigType `json:"thresholdConfigType"`
	// User aggregation type
	UserAggregateType RateLimitingRuleUserAggregateType `json:"userAggregateType"`
	// Value based threshold config
	ValueBasedThresholdConfig *InputValueBasedThresholdConfig `json:"valueBasedThresholdConfig"`
}

// GetApiAggregateType returns InputRateLimitingRuleThresholdConfig.ApiAggregateType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetApiAggregateType() RateLimitingRuleApiAggregateType {
	return v.ApiAggregateType
}

// GetDynamicThresholdConfig returns InputRateLimitingRuleThresholdConfig.DynamicThresholdConfig, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetDynamicThresholdConfig() *InputDynamicThresholdConfig {
	return v.DynamicThresholdConfig
}

// GetRollingWindowThresholdConfig returns InputRateLimitingRuleThresholdConfig.RollingWindowThresholdConfig, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetRollingWindowThresholdConfig() *InputRollingWindowThresholdConfig {
	return v.RollingWindowThresholdConfig
}

// GetThresholdConfigType returns InputRateLimitingRuleThresholdConfig.ThresholdConfigType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetThresholdConfigType() RateLimitingRuleThresholdConfigType {
	return v.ThresholdConfigType
}

// GetUserAggregateType returns InputRateLimitingRuleThresholdConfig.UserAggregateType, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetUserAggregateType() RateLimitingRuleUserAggregateType {
	return v.UserAggregateType
}

// GetValueBasedThresholdConfig returns InputRateLimitingRuleThresholdConfig.ValueBasedThresholdConfig, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleThresholdConfig) GetValueBasedThresholdConfig() *InputValueBasedThresholdConfig {
	return v.ValueBasedThresholdConfig
}

// Url scope condition applicable on a rate limit rule
type InputRateLimitingRuleUrlScope struct {
	// List of url regex
	UrlRegexes []*string `json:"urlRegexes"`
}

// GetUrlRegexes returns InputRateLimitingRuleUrlScope.UrlRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUrlScope) GetUrlRegexes() []*string { return v.UrlRegexes }

// User agent condition for a rate limit rule
type InputRateLimitingRuleUserAgentCondition struct {
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of user agent regexes
	UserAgentRegexes []*string `json:"userAgentRegexes"`
	// List of user agents
	UserAgents []*string `json:"userAgents"`
}

// GetExclude returns InputRateLimitingRuleUserAgentCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserAgentCondition) GetExclude() *bool { return v.Exclude }

// GetUserAgentRegexes returns InputRateLimitingRuleUserAgentCondition.UserAgentRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserAgentCondition) GetUserAgentRegexes() []*string {
	return v.UserAgentRegexes
}

// GetUserAgents returns InputRateLimitingRuleUserAgentCondition.UserAgents, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserAgentCondition) GetUserAgents() []*string { return v.UserAgents }

// User ID condition for a rate limit rule
type InputRateLimitingRuleUserIdCondition struct {
	// List of actor entity IDs
	ActorEntityIds []*string `json:"actorEntityIds"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// List of user ID regexes
	UserIdRegexes []*string `json:"userIdRegexes"`
	// List of user IDs
	UserIds []*string `json:"userIds"`
}

// GetActorEntityIds returns InputRateLimitingRuleUserIdCondition.ActorEntityIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserIdCondition) GetActorEntityIds() []*string { return v.ActorEntityIds }

// GetExclude returns InputRateLimitingRuleUserIdCondition.Exclude, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserIdCondition) GetExclude() *bool { return v.Exclude }

// GetUserIdRegexes returns InputRateLimitingRuleUserIdCondition.UserIdRegexes, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserIdCondition) GetUserIdRegexes() []*string { return v.UserIdRegexes }

// GetUserIds returns InputRateLimitingRuleUserIdCondition.UserIds, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRuleUserIdCondition) GetUserIds() []*string { return v.UserIds }

type InputRateLimitingRulesFilter struct {
	Categories []*RateLimitingRuleCategory `json:"categories"`
	Scope      *InputRuleConfigScope       `json:"scope"`
}

// GetCategories returns InputRateLimitingRulesFilter.Categories, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRulesFilter) GetCategories() []*RateLimitingRuleCategory {
	return v.Categories
}

// GetScope returns InputRateLimitingRulesFilter.Scope, and is useful for accessing the field via an interface.
func (v *InputRateLimitingRulesFilter) GetScope() *InputRuleConfigScope { return v.Scope }

// Rate limit rule transaction action config
type InputRateLimitingTransactionActionConfig struct {
	// Rate limit rule action
	Action InputRateLimitingRuleAction `json:"action"`
	// Requested expiration timestamp for the rule
	ExpirationTimestamp *string `json:"expirationTimestamp"`
}

// GetAction returns InputRateLimitingTransactionActionConfig.Action, and is useful for accessing the field via an interface.
func (v *InputRateLimitingTransactionActionConfig) GetAction() InputRateLimitingRuleAction {
	return v.Action
}

// GetExpirationTimestamp returns InputRateLimitingTransactionActionConfig.ExpirationTimestamp, and is useful for accessing the field via an interface.
func (v *InputRateLimitingTransactionActionConfig) GetExpirationTimestamp() *string {
	return v.ExpirationTimestamp
}

// Threshold config which specifies count allowed over the given time range
type InputRollingWindowThresholdConfig struct {
	// Count allowed for specified time range
	CountAllowed int64 `json:"countAllowed"`
	// Time range during which counts are calculated
	Duration string `json:"duration"`
}

// GetCountAllowed returns InputRollingWindowThresholdConfig.CountAllowed, and is useful for accessing the field via an interface.
func (v *InputRollingWindowThresholdConfig) GetCountAllowed() int64 { return v.CountAllowed }

// GetDuration returns InputRollingWindowThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *InputRollingWindowThresholdConfig) GetDuration() string { return v.Duration }

// Rate limit rule scope
type InputRuleConfigScope struct {
	// Environment scope applicable on rate limit rule
	EnvironmentScope *InputEnvironmentScope `json:"environmentScope"`
}

// GetEnvironmentScope returns InputRuleConfigScope.EnvironmentScope, and is useful for accessing the field via an interface.
func (v *InputRuleConfigScope) GetEnvironmentScope() *InputEnvironmentScope {
	return v.EnvironmentScope
}

// Threshold config which specifies unique values allowed over the given time range
type InputValueBasedThresholdConfig struct {
	// Time range during which unique values are calculated
	Duration string `json:"duration"`
	// Type of sensitive params evaluation, only applicable for sensitive params value type
	SensitiveParamsEvaluationType *SensitiveParamsEvaluationType `json:"sensitiveParamsEvaluationType"`
	// Unique values allowed for specified time range
	UniqueValuesAllowed int64 `json:"uniqueValuesAllowed"`
	// Type of value based threshold config
	ValueType ValueBasedThresholdConfigType `json:"valueType"`
}

// GetDuration returns InputValueBasedThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *InputValueBasedThresholdConfig) GetDuration() string { return v.Duration }

// GetSensitiveParamsEvaluationType returns InputValueBasedThresholdConfig.SensitiveParamsEvaluationType, and is useful for accessing the field via an interface.
func (v *InputValueBasedThresholdConfig) GetSensitiveParamsEvaluationType() *SensitiveParamsEvaluationType {
	return v.SensitiveParamsEvaluationType
}

// GetUniqueValuesAllowed returns InputValueBasedThresholdConfig.UniqueValuesAllowed, and is useful for accessing the field via an interface.
func (v *InputValueBasedThresholdConfig) GetUniqueValuesAllowed() int64 { return v.UniqueValuesAllowed }

// GetValueType returns InputValueBasedThresholdConfig.ValueType, and is useful for accessing the field via an interface.
func (v *InputValueBasedThresholdConfig) GetValueType() ValueBasedThresholdConfigType {
	return v.ValueType
}

// Fragment for leafCondition
type LeafConditionFields struct {
	// Leaf condition type
	ConditionType RateLimitingRuleLeafConditionType `json:"conditionType"`
	// Dataset and datatype condition applicable on a rate limit rule
	DatatypeCondition *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition `json:"datatypeCondition"`
	// IP address condition applicable on a rate limit rule
	IpAddressCondition *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition `json:"ipAddressCondition"`
	// IP reputation condition applicable on a rate limit rule
	IpReputationCondition *LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition `json:"ipReputationCondition"`
	// IP location type condition applicable on a rate limit rule
	IpLocationTypeCondition *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition `json:"ipLocationTypeCondition"`
	// Email domain condition applicable on a rate limit rule
	EmailDomainCondition *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition `json:"emailDomainCondition"`
	// Ip organisation condition applicable on a rate limit rule
	IpOrganisationCondition *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition `json:"ipOrganisationCondition"`
	// Ip asn condition applicable on a rate limit rule
	IpAsnCondition *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition `json:"ipAsnCondition"`
	// User ID condition applicable on a rate limit rule
	UserIdCondition *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition `json:"userIdCondition"`
	// User agent condition applicable on a rate limit rule
	UserAgentCondition *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition `json:"userAgentCondition"`
	// IP connection type condition applicable on a rate limit rule
	IpConnectionTypeCondition *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition `json:"ipConnectionTypeCondition"`
	// Ip abuse velocity condition applicable on a rate limit rule
	IpAbuseVelocityCondition *LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition `json:"ipAbuseVelocityCondition"`
	// Key value condition applicable on a rate limit rule
	KeyValueCondition *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition `json:"keyValueCondition"`
	// Region condition applicable on a rate limit rule
	RegionCondition *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition `json:"regionCondition"`
	// Request scanner type condition applicable on a rate limit rule
	RequestScannerTypeCondition *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition `json:"requestScannerTypeCondition"`
	// Scope condition applicable on a rate limit rule
	ScopeCondition *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition `json:"scopeCondition"`
}

// GetConditionType returns LeafConditionFields.ConditionType, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetConditionType() RateLimitingRuleLeafConditionType {
	return v.ConditionType
}

// GetDatatypeCondition returns LeafConditionFields.DatatypeCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetDatatypeCondition() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition {
	return v.DatatypeCondition
}

// GetIpAddressCondition returns LeafConditionFields.IpAddressCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpAddressCondition() *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition {
	return v.IpAddressCondition
}

// GetIpReputationCondition returns LeafConditionFields.IpReputationCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpReputationCondition() *LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition {
	return v.IpReputationCondition
}

// GetIpLocationTypeCondition returns LeafConditionFields.IpLocationTypeCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpLocationTypeCondition() *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition {
	return v.IpLocationTypeCondition
}

// GetEmailDomainCondition returns LeafConditionFields.EmailDomainCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetEmailDomainCondition() *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition {
	return v.EmailDomainCondition
}

// GetIpOrganisationCondition returns LeafConditionFields.IpOrganisationCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpOrganisationCondition() *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition {
	return v.IpOrganisationCondition
}

// GetIpAsnCondition returns LeafConditionFields.IpAsnCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpAsnCondition() *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition {
	return v.IpAsnCondition
}

// GetUserIdCondition returns LeafConditionFields.UserIdCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetUserIdCondition() *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition {
	return v.UserIdCondition
}

// GetUserAgentCondition returns LeafConditionFields.UserAgentCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetUserAgentCondition() *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition {
	return v.UserAgentCondition
}

// GetIpConnectionTypeCondition returns LeafConditionFields.IpConnectionTypeCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpConnectionTypeCondition() *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition {
	return v.IpConnectionTypeCondition
}

// GetIpAbuseVelocityCondition returns LeafConditionFields.IpAbuseVelocityCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetIpAbuseVelocityCondition() *LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition {
	return v.IpAbuseVelocityCondition
}

// GetKeyValueCondition returns LeafConditionFields.KeyValueCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetKeyValueCondition() *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition {
	return v.KeyValueCondition
}

// GetRegionCondition returns LeafConditionFields.RegionCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetRegionCondition() *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition {
	return v.RegionCondition
}

// GetRequestScannerTypeCondition returns LeafConditionFields.RequestScannerTypeCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetRequestScannerTypeCondition() *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition {
	return v.RequestScannerTypeCondition
}

// GetScopeCondition returns LeafConditionFields.ScopeCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFields) GetScopeCondition() *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition {
	return v.ScopeCondition
}

// LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition includes the requested fields of the GraphQL type RateLimitingRuleDatatypeCondition.
// The GraphQL type's documentation follows.
//
// Dataset and datatype condition for a rate limit rule
type LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition struct {
	// List of dataset ids applicable
	DatasetIds []*string `json:"datasetIds"`
	// List of datatype ids applicable
	DatatypeIds []*string `json:"datatypeIds"`
	// data location type
	DataLocation *RateLimitingRuleDataLocation `json:"dataLocation"`
	// datatype matching
	DatatypeMatching *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching `json:"datatypeMatching"`
}

// GetDatasetIds returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition.DatasetIds, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition) GetDatasetIds() []*string {
	return v.DatasetIds
}

// GetDatatypeIds returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition.DatatypeIds, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition) GetDatatypeIds() []*string {
	return v.DatatypeIds
}

// GetDataLocation returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition.DataLocation, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition) GetDataLocation() *RateLimitingRuleDataLocation {
	return v.DataLocation
}

// GetDatatypeMatching returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition.DatatypeMatching, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition) GetDatatypeMatching() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching {
	return v.DatatypeMatching
}

// LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching includes the requested fields of the GraphQL type RateLimitingRuleDatatypeMatching.
// The GraphQL type's documentation follows.
//
// Rate limiting datatype matching
type LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching struct {
	// datatype matching type
	DatatypeMatchingType *RateLimitingRuleDatatypeMatchingType `json:"datatypeMatchingType"`
	// regex based matching
	RegexBasedMatching *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching `json:"regexBasedMatching"`
}

// GetDatatypeMatchingType returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching.DatatypeMatchingType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching) GetDatatypeMatchingType() *RateLimitingRuleDatatypeMatchingType {
	return v.DatatypeMatchingType
}

// GetRegexBasedMatching returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching.RegexBasedMatching, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatching) GetRegexBasedMatching() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching {
	return v.RegexBasedMatching
}

// LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching includes the requested fields of the GraphQL type RateLimitingRuleRegexBasedMatching.
// The GraphQL type's documentation follows.
//
// Rate limiting rule regex based matching
type LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching struct {
	// custom matching location key value condition
	CustomMatchingLocation *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition `json:"customMatchingLocation"`
}

// GetCustomMatchingLocation returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching.CustomMatchingLocation, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatching) GetCustomMatchingLocation() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition {
	return v.CustomMatchingLocation
}

// LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition includes the requested fields of the GraphQL type RateLimitingRuleKeyValueCondition.
// The GraphQL type's documentation follows.
//
// Key value condition applicable on a rate limit rule
type LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition struct {
	// Key value condition metadata type
	MetadataType RateLimitingRuleKeyValueConditionMetadataType `json:"metadataType"`
	// Key condition
	KeyCondition *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition `json:"keyCondition"`
}

// GetMetadataType returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition.MetadataType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition) GetMetadataType() RateLimitingRuleKeyValueConditionMetadataType {
	return v.MetadataType
}

// GetKeyCondition returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition.KeyCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueCondition) GetKeyCondition() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition {
	return v.KeyCondition
}

// LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition includes the requested fields of the GraphQL type RateLimitingRuleStringCondition.
// The GraphQL type's documentation follows.
//
// String condition which matches a string value using the specified operator
type LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition struct {
	// Operator to be used to match the string value
	Operator RateLimitingRuleKeyValueMatchOperator `json:"operator"`
	// String value to be matched
	Value string `json:"value"`
}

// GetOperator returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition.Operator, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition) GetOperator() RateLimitingRuleKeyValueMatchOperator {
	return v.Operator
}

// GetValue returns LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition.Value, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeConditionDatatypeMatchingRateLimitingRuleDatatypeMatchingRegexBasedMatchingRateLimitingRuleRegexBasedMatchingCustomMatchingLocationRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition) GetValue() string {
	return v.Value
}

// LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition includes the requested fields of the GraphQL type RateLimitingRuleEmailDomainCondition.
// The GraphQL type's documentation follows.
//
// Email domain condition for a rate limit rule
type LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition struct {
	// List of email regexes
	EmailRegexes []*string `json:"emailRegexes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetEmailRegexes returns LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition.EmailRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition) GetEmailRegexes() []*string {
	return v.EmailRegexes
}

// GetExclude returns LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition includes the requested fields of the GraphQL type RateLimitingRuleIpAbuseVelocityCondition.
// The GraphQL type's documentation follows.
//
// Ip abuse velocity condition applicable on a rate limit rule
type LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition struct {
	// Minimum Ip abuse velocity applicable
	MinIpAbuseVelocity RateLimitingRuleIpAbuseVelocity `json:"minIpAbuseVelocity"`
}

// GetMinIpAbuseVelocity returns LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition.MinIpAbuseVelocity, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition) GetMinIpAbuseVelocity() RateLimitingRuleIpAbuseVelocity {
	return v.MinIpAbuseVelocity
}

// LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition includes the requested fields of the GraphQL type RateLimitingRuleIpAddressCondition.
// The GraphQL type's documentation follows.
//
// IP address condition applicable on a rate limit rule
type LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition struct {
	// List of CIDR IP ranges
	CidrIpRanges []*string `json:"cidrIpRanges"`
	// List of IP addresses
	IpAddresses []*string `json:"ipAddresses"`
	// List of IP addresses and CIDR IP ranges
	RawInputIpData []*string `json:"rawInputIpData"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
	// ip address condition type
	IpAddressConditionType *RateLimitingRuleIpAddressConditionType `json:"ipAddressConditionType"`
}

// GetCidrIpRanges returns LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition.CidrIpRanges, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition) GetCidrIpRanges() []*string {
	return v.CidrIpRanges
}

// GetIpAddresses returns LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition.IpAddresses, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition) GetIpAddresses() []*string {
	return v.IpAddresses
}

// GetRawInputIpData returns LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition.RawInputIpData, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition) GetRawInputIpData() []*string {
	return v.RawInputIpData
}

// GetExclude returns LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition) GetExclude() *bool {
	return v.Exclude
}

// GetIpAddressConditionType returns LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition.IpAddressConditionType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition) GetIpAddressConditionType() *RateLimitingRuleIpAddressConditionType {
	return v.IpAddressConditionType
}

// LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition includes the requested fields of the GraphQL type RateLimitingRuleIpAsnCondition.
// The GraphQL type's documentation follows.
//
// Ip asn condition for a rate limit rule
type LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition struct {
	// List of ip asn regexes
	IpAsnRegexes []*string `json:"ipAsnRegexes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetIpAsnRegexes returns LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition.IpAsnRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition) GetIpAsnRegexes() []*string {
	return v.IpAsnRegexes
}

// GetExclude returns LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition includes the requested fields of the GraphQL type RateLimitingRuleIpConnectionTypeCondition.
// The GraphQL type's documentation follows.
//
// IP connection type condition for a rate limit rule
type LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition struct {
	// List of ip connection types
	IpConnectionTypes []*RateLimitingRuleIpConnectionType `json:"ipConnectionTypes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetIpConnectionTypes returns LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition.IpConnectionTypes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition) GetIpConnectionTypes() []*RateLimitingRuleIpConnectionType {
	return v.IpConnectionTypes
}

// GetExclude returns LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition includes the requested fields of the GraphQL type RateLimitingRuleIpLocationTypeCondition.
// The GraphQL type's documentation follows.
//
// IP location type condition applicable on a rate limit rule
type LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition struct {
	// List of IP locations types applicable
	IpLocationTypes []*RateLimitingRuleIpLocationType `json:"ipLocationTypes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetIpLocationTypes returns LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition.IpLocationTypes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition) GetIpLocationTypes() []*RateLimitingRuleIpLocationType {
	return v.IpLocationTypes
}

// GetExclude returns LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition includes the requested fields of the GraphQL type RateLimitingRuleIpOrganisationCondition.
// The GraphQL type's documentation follows.
//
// Ip organisation condition for a rate limit rule
type LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition struct {
	// List of ip organisation regexes
	IpOrganisationRegexes []*string `json:"ipOrganisationRegexes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetIpOrganisationRegexes returns LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition.IpOrganisationRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition) GetIpOrganisationRegexes() []*string {
	return v.IpOrganisationRegexes
}

// GetExclude returns LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition includes the requested fields of the GraphQL type RateLimitingRuleIpReputationCondition.
// The GraphQL type's documentation follows.
//
// IP reputation condition applicable on a rate limit rule
type LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition struct {
	// Minimum IP reputation severity applicable
	MinIpReputationSeverity RateLimitingRuleIpReputationSeverity `json:"minIpReputationSeverity"`
}

// GetMinIpReputationSeverity returns LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition.MinIpReputationSeverity, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition) GetMinIpReputationSeverity() RateLimitingRuleIpReputationSeverity {
	return v.MinIpReputationSeverity
}

// LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition includes the requested fields of the GraphQL type RateLimitingRuleKeyValueCondition.
// The GraphQL type's documentation follows.
//
// Key value condition applicable on a rate limit rule
type LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition struct {
	// Key condition
	KeyCondition *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition `json:"keyCondition"`
	// Key value condition metadata type
	MetadataType RateLimitingRuleKeyValueConditionMetadataType `json:"metadataType"`
	// Value condition
	ValueCondition *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition `json:"valueCondition"`
}

// GetKeyCondition returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition.KeyCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition) GetKeyCondition() *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition {
	return v.KeyCondition
}

// GetMetadataType returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition.MetadataType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition) GetMetadataType() RateLimitingRuleKeyValueConditionMetadataType {
	return v.MetadataType
}

// GetValueCondition returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition.ValueCondition, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition) GetValueCondition() *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition {
	return v.ValueCondition
}

// LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition includes the requested fields of the GraphQL type RateLimitingRuleStringCondition.
// The GraphQL type's documentation follows.
//
// String condition which matches a string value using the specified operator
type LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition struct {
	// Operator to be used to match the string value
	Operator RateLimitingRuleKeyValueMatchOperator `json:"operator"`
	// String value to be matched
	Value string `json:"value"`
}

// GetOperator returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition.Operator, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition) GetOperator() RateLimitingRuleKeyValueMatchOperator {
	return v.Operator
}

// GetValue returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition.Value, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionKeyConditionRateLimitingRuleStringCondition) GetValue() string {
	return v.Value
}

// LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition includes the requested fields of the GraphQL type RateLimitingRuleStringCondition.
// The GraphQL type's documentation follows.
//
// String condition which matches a string value using the specified operator
type LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition struct {
	// Operator to be used to match the string value
	Operator RateLimitingRuleKeyValueMatchOperator `json:"operator"`
	// String value to be matched
	Value string `json:"value"`
}

// GetOperator returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition.Operator, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition) GetOperator() RateLimitingRuleKeyValueMatchOperator {
	return v.Operator
}

// GetValue returns LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition.Value, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueConditionValueConditionRateLimitingRuleStringCondition) GetValue() string {
	return v.Value
}

// LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition includes the requested fields of the GraphQL type RateLimitingRuleRegionCondition.
// The GraphQL type's documentation follows.
//
// Region condition applicable on a rate limit rule
type LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition struct {
	// List of region identifiers
	RegionIdentifiers []*LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier `json:"regionIdentifiers"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetRegionIdentifiers returns LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition.RegionIdentifiers, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition) GetRegionIdentifiers() []*LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier {
	return v.RegionIdentifiers
}

// GetExclude returns LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier includes the requested fields of the GraphQL type RateLimitingRegionIdentifier.
// The GraphQL type's documentation follows.
//
// Region identifier schema for rate limit region condition
type LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier struct {
	// Country ISO code for region identifier
	CountryIsoCode string `json:"countryIsoCode"`
}

// GetCountryIsoCode returns LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier.CountryIsoCode, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsRegionConditionRateLimitingRuleRegionConditionRegionIdentifiersRateLimitingRegionIdentifier) GetCountryIsoCode() string {
	return v.CountryIsoCode
}

// LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition includes the requested fields of the GraphQL type RateLimitingRuleRequestScannerTypeCondition.
// The GraphQL type's documentation follows.
//
// Request scanner type condition for a rate limit rule
type LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition struct {
	// List of scanner types
	ScannerTypes []*string `json:"scannerTypes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetScannerTypes returns LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition.ScannerTypes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition) GetScannerTypes() []*string {
	return v.ScannerTypes
}

// GetExclude returns LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition includes the requested fields of the GraphQL type RateLimitingRuleScopeCondition.
// The GraphQL type's documentation follows.
//
// Scope condition applicable on a rate limit rule
type LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition struct {
	// Entity scope condition
	EntityScope *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope `json:"entityScope"`
	// Label scope condition
	LabelScope *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope `json:"labelScope"`
	// Scope condition type
	ScopeType RateLimitingRuleScopeConditionType `json:"scopeType"`
	// Url scope condition
	UrlScope *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope `json:"urlScope"`
}

// GetEntityScope returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition.EntityScope, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition) GetEntityScope() *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope {
	return v.EntityScope
}

// GetLabelScope returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition.LabelScope, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition) GetLabelScope() *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope {
	return v.LabelScope
}

// GetScopeType returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition.ScopeType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition) GetScopeType() RateLimitingRuleScopeConditionType {
	return v.ScopeType
}

// GetUrlScope returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition.UrlScope, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition) GetUrlScope() *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope {
	return v.UrlScope
}

// LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope includes the requested fields of the GraphQL type RateLimitingRuleEntityScope.
// The GraphQL type's documentation follows.
//
// Entity scope condition applicable on a rate limit rule
type LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope struct {
	// List of entity ids applicable
	EntityIds []*string `json:"entityIds"`
	// Entity type
	EntityType RateLimitingRuleEntityType `json:"entityType"`
}

// GetEntityIds returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope.EntityIds, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope) GetEntityIds() []*string {
	return v.EntityIds
}

// GetEntityType returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope.EntityType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionEntityScopeRateLimitingRuleEntityScope) GetEntityType() RateLimitingRuleEntityType {
	return v.EntityType
}

// LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope includes the requested fields of the GraphQL type RateLimitingRuleLabelScope.
// The GraphQL type's documentation follows.
//
// Label scope condition applicable on a rate limit rule
type LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope struct {
	// List of label ids applicable
	LabelIds []*string `json:"labelIds"`
	// Label type
	LabelType RateLimitingRuleLabelType `json:"labelType"`
}

// GetLabelIds returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope.LabelIds, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope) GetLabelIds() []*string {
	return v.LabelIds
}

// GetLabelType returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope.LabelType, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionLabelScopeRateLimitingRuleLabelScope) GetLabelType() RateLimitingRuleLabelType {
	return v.LabelType
}

// LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope includes the requested fields of the GraphQL type RateLimitingRuleUrlScope.
// The GraphQL type's documentation follows.
//
// Url scope condition applicable on a rate limit rule
type LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope struct {
	// List of url regex
	UrlRegexes []*string `json:"urlRegexes"`
}

// GetUrlRegexes returns LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope.UrlRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsScopeConditionRateLimitingRuleScopeConditionUrlScopeRateLimitingRuleUrlScope) GetUrlRegexes() []*string {
	return v.UrlRegexes
}

// LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition includes the requested fields of the GraphQL type RateLimitingRuleUserAgentCondition.
// The GraphQL type's documentation follows.
//
// User agent condition for a rate limit rule
type LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition struct {
	// List of user agent regexes
	UserAgentRegexes []*string `json:"userAgentRegexes"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetUserAgentRegexes returns LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition.UserAgentRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition) GetUserAgentRegexes() []*string {
	return v.UserAgentRegexes
}

// GetExclude returns LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition) GetExclude() *bool {
	return v.Exclude
}

// LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition includes the requested fields of the GraphQL type RateLimitingRuleUserIdCondition.
// The GraphQL type's documentation follows.
//
// User ID condition for a rate limit rule
type LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition struct {
	// List of user ID regexes
	UserIdRegexes []*string `json:"userIdRegexes"`
	// List of user IDs
	UserIds []*string `json:"userIds"`
	// boolean denoting exclude condition
	Exclude *bool `json:"exclude"`
}

// GetUserIdRegexes returns LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition.UserIdRegexes, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition) GetUserIdRegexes() []*string {
	return v.UserIdRegexes
}

// GetUserIds returns LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition.UserIds, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition) GetUserIds() []*string {
	return v.UserIds
}

// GetExclude returns LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition.Exclude, and is useful for accessing the field via an interface.
func (v *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition) GetExclude() *bool {
	return v.Exclude
}

// Logical operator describing how to combine multiple independent clauses
type LogicalOperator string

const (
	// AND
	LogicalOperatorAnd LogicalOperator = "AND"
	// OR
	LogicalOperatorOr LogicalOperator = "OR"
)

var AllLogicalOperator = []LogicalOperator{
	LogicalOperatorAnd,
	LogicalOperatorOr,
}

type RateLimitingRuleActionType string

const (
	// ALERT
	RateLimitingRuleActionTypeAlert RateLimitingRuleActionType = "ALERT"
	// BLOCK
	RateLimitingRuleActionTypeBlock RateLimitingRuleActionType = "BLOCK"
	// ALLOW
	RateLimitingRuleActionTypeAllow RateLimitingRuleActionType = "ALLOW"
	// MARK_FOR_TESTING
	RateLimitingRuleActionTypeMarkForTesting RateLimitingRuleActionType = "MARK_FOR_TESTING"
)

var AllRateLimitingRuleActionType = []RateLimitingRuleActionType{
	RateLimitingRuleActionTypeAlert,
	RateLimitingRuleActionTypeBlock,
	RateLimitingRuleActionTypeAllow,
	RateLimitingRuleActionTypeMarkForTesting,
}

type RateLimitingRuleAgentModificationType string

const (
	// Add a header with inline processing of request on matching conditions
	RateLimitingRuleAgentModificationTypeHeaderInjection RateLimitingRuleAgentModificationType = "HEADER_INJECTION"
)

var AllRateLimitingRuleAgentModificationType = []RateLimitingRuleAgentModificationType{
	RateLimitingRuleAgentModificationTypeHeaderInjection,
}

type RateLimitingRuleApiAggregateType string

const (
	// PER_ENDPOINT
	RateLimitingRuleApiAggregateTypePerEndpoint RateLimitingRuleApiAggregateType = "PER_ENDPOINT"
	// ACROSS_ENDPOINTS
	RateLimitingRuleApiAggregateTypeAcrossEndpoints RateLimitingRuleApiAggregateType = "ACROSS_ENDPOINTS"
)

var AllRateLimitingRuleApiAggregateType = []RateLimitingRuleApiAggregateType{
	RateLimitingRuleApiAggregateTypePerEndpoint,
	RateLimitingRuleApiAggregateTypeAcrossEndpoints,
}

type RateLimitingRuleCategory string

const (
	// ENDPOINT_RATE_LIMITING
	RateLimitingRuleCategoryEndpointRateLimiting RateLimitingRuleCategory = "ENDPOINT_RATE_LIMITING"
	// DATA_EXFILTRATION
	RateLimitingRuleCategoryDataExfiltration RateLimitingRuleCategory = "DATA_EXFILTRATION"
	// ENUMERATION
	RateLimitingRuleCategoryEnumeration RateLimitingRuleCategory = "ENUMERATION"
)

var AllRateLimitingRuleCategory = []RateLimitingRuleCategory{
	RateLimitingRuleCategoryEndpointRateLimiting,
	RateLimitingRuleCategoryDataExfiltration,
	RateLimitingRuleCategoryEnumeration,
}

type RateLimitingRuleConditionType string

const (
	// LOGICAL_CONDITION
	RateLimitingRuleConditionTypeLogicalCondition RateLimitingRuleConditionType = "LOGICAL_CONDITION"
	// LEAF_CONDITION
	RateLimitingRuleConditionTypeLeafCondition RateLimitingRuleConditionType = "LEAF_CONDITION"
)

var AllRateLimitingRuleConditionType = []RateLimitingRuleConditionType{
	RateLimitingRuleConditionTypeLogicalCondition,
	RateLimitingRuleConditionTypeLeafCondition,
}

// Rate limiting rule data location
type RateLimitingRuleDataLocation string

const (
	// REQUEST
	RateLimitingRuleDataLocationRequest RateLimitingRuleDataLocation = "REQUEST"
	// RESPONSE
	RateLimitingRuleDataLocationResponse RateLimitingRuleDataLocation = "RESPONSE"
)

var AllRateLimitingRuleDataLocation = []RateLimitingRuleDataLocation{
	RateLimitingRuleDataLocationRequest,
	RateLimitingRuleDataLocationResponse,
}

// Rate limiting rule data sensitivity
type RateLimitingRuleDataSensitivityLevel string

const (
	// LOW
	RateLimitingRuleDataSensitivityLevelLow RateLimitingRuleDataSensitivityLevel = "LOW"
	// MEDIUM
	RateLimitingRuleDataSensitivityLevelMedium RateLimitingRuleDataSensitivityLevel = "MEDIUM"
	// HIGH
	RateLimitingRuleDataSensitivityLevelHigh RateLimitingRuleDataSensitivityLevel = "HIGH"
	// CRITICAL
	RateLimitingRuleDataSensitivityLevelCritical RateLimitingRuleDataSensitivityLevel = "CRITICAL"
)

var AllRateLimitingRuleDataSensitivityLevel = []RateLimitingRuleDataSensitivityLevel{
	RateLimitingRuleDataSensitivityLevelLow,
	RateLimitingRuleDataSensitivityLevelMedium,
	RateLimitingRuleDataSensitivityLevelHigh,
	RateLimitingRuleDataSensitivityLevelCritical,
}

// Rate limiting rule datatype matching type
type RateLimitingRuleDatatypeMatchingType string

const (
	// REGEX_BASED_MATCHING
	RateLimitingRuleDatatypeMatchingTypeRegexBasedMatching RateLimitingRuleDatatypeMatchingType = "REGEX_BASED_MATCHING"
	// LEARNED_TYPES_MATCHING
	RateLimitingRuleDatatypeMatchingTypeLearnedTypesMatching RateLimitingRuleDatatypeMatchingType = "LEARNED_TYPES_MATCHING"
)

var AllRateLimitingRuleDatatypeMatchingType = []RateLimitingRuleDatatypeMatchingType{
	RateLimitingRuleDatatypeMatchingTypeRegexBasedMatching,
	RateLimitingRuleDatatypeMatchingTypeLearnedTypesMatching,
}

type RateLimitingRuleEntityType string

const (
	// API
	RateLimitingRuleEntityTypeApi RateLimitingRuleEntityType = "API"
	// SERVICE
	RateLimitingRuleEntityTypeService RateLimitingRuleEntityType = "SERVICE"
)

var AllRateLimitingRuleEntityType = []RateLimitingRuleEntityType{
	RateLimitingRuleEntityTypeApi,
	RateLimitingRuleEntityTypeService,
}

type RateLimitingRuleEventSeverity string

const (
	// LOW
	RateLimitingRuleEventSeverityLow RateLimitingRuleEventSeverity = "LOW"
	// MEDIUM
	RateLimitingRuleEventSeverityMedium RateLimitingRuleEventSeverity = "MEDIUM"
	// HIGH
	RateLimitingRuleEventSeverityHigh RateLimitingRuleEventSeverity = "HIGH"
	// CRITICAL
	RateLimitingRuleEventSeverityCritical RateLimitingRuleEventSeverity = "CRITICAL"
)

var AllRateLimitingRuleEventSeverity = []RateLimitingRuleEventSeverity{
	RateLimitingRuleEventSeverityLow,
	RateLimitingRuleEventSeverityMedium,
	RateLimitingRuleEventSeverityHigh,
	RateLimitingRuleEventSeverityCritical,
}

// Fragment for rateLimitingRules
type RateLimitingRuleFields struct {
	// Rate limit rule category
	Category RateLimitingRuleCategory `json:"category"`
	// Rate limit rule description
	Description *string `json:"description"`
	// Rate limit rule enabled status
	Enabled bool `json:"enabled"`
	// Rate limit rule ID
	Id string `json:"id"`
	// Rate limit rule name
	Name string `json:"name"`
	// Rate limit rule custom labels
	Labels []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel `json:"labels"`
	// List of configs containing thresholds and actions for a rate limit rule
	ThresholdActionConfigs []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`
	// Transaction action config for DLP rule
	TransactionActionConfigs *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`
	// Rate limit rule scope
	RuleConfigScope *RateLimitingRuleFieldsRuleConfigScope `json:"ruleConfigScope"`
	// Rate limit rule status
	RuleStatus *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus `json:"ruleStatus"`
	// List of rate limit rule conditions
	Conditions []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition `json:"conditions"`
}

// GetCategory returns RateLimitingRuleFields.Category, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetCategory() RateLimitingRuleCategory { return v.Category }

// GetDescription returns RateLimitingRuleFields.Description, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetDescription() *string { return v.Description }

// GetEnabled returns RateLimitingRuleFields.Enabled, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetEnabled() bool { return v.Enabled }

// GetId returns RateLimitingRuleFields.Id, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetId() string { return v.Id }

// GetName returns RateLimitingRuleFields.Name, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetName() string { return v.Name }

// GetLabels returns RateLimitingRuleFields.Labels, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetLabels() []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel {
	return v.Labels
}

// GetThresholdActionConfigs returns RateLimitingRuleFields.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetThresholdActionConfigs() []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig {
	return v.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns RateLimitingRuleFields.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetTransactionActionConfigs() *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig {
	return v.TransactionActionConfigs
}

// GetRuleConfigScope returns RateLimitingRuleFields.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetRuleConfigScope() *RateLimitingRuleFieldsRuleConfigScope {
	return v.RuleConfigScope
}

// GetRuleStatus returns RateLimitingRuleFields.RuleStatus, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetRuleStatus() *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus {
	return v.RuleStatus
}

// GetConditions returns RateLimitingRuleFields.Conditions, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFields) GetConditions() []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition {
	return v.Conditions
}

// RateLimitingRuleFieldsConditionsRateLimitingRuleCondition includes the requested fields of the GraphQL type RateLimitingRuleCondition.
// The GraphQL type's documentation follows.
//
// Condition applicable for a rate limit rule
type RateLimitingRuleFieldsConditionsRateLimitingRuleCondition struct {
	// Rate limit rule leaf condition
	LeafCondition *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition `json:"leafCondition"`
}

// GetLeafCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleCondition.LeafCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleCondition) GetLeafCondition() *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition {
	return v.LeafCondition
}

// RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition includes the requested fields of the GraphQL type RateLimitingRuleLeafCondition.
// The GraphQL type's documentation follows.
//
// Leaf condition applicable on a rate limit rule
type RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition struct {
	LeafConditionFields `json:"-"`
}

// GetConditionType returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.ConditionType, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetConditionType() RateLimitingRuleLeafConditionType {
	return v.LeafConditionFields.ConditionType
}

// GetDatatypeCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.DatatypeCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetDatatypeCondition() *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition {
	return v.LeafConditionFields.DatatypeCondition
}

// GetIpAddressCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpAddressCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpAddressCondition() *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition {
	return v.LeafConditionFields.IpAddressCondition
}

// GetIpReputationCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpReputationCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpReputationCondition() *LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition {
	return v.LeafConditionFields.IpReputationCondition
}

// GetIpLocationTypeCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpLocationTypeCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpLocationTypeCondition() *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition {
	return v.LeafConditionFields.IpLocationTypeCondition
}

// GetEmailDomainCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.EmailDomainCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetEmailDomainCondition() *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition {
	return v.LeafConditionFields.EmailDomainCondition
}

// GetIpOrganisationCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpOrganisationCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpOrganisationCondition() *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition {
	return v.LeafConditionFields.IpOrganisationCondition
}

// GetIpAsnCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpAsnCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpAsnCondition() *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition {
	return v.LeafConditionFields.IpAsnCondition
}

// GetUserIdCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.UserIdCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetUserIdCondition() *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition {
	return v.LeafConditionFields.UserIdCondition
}

// GetUserAgentCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.UserAgentCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetUserAgentCondition() *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition {
	return v.LeafConditionFields.UserAgentCondition
}

// GetIpConnectionTypeCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpConnectionTypeCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpConnectionTypeCondition() *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition {
	return v.LeafConditionFields.IpConnectionTypeCondition
}

// GetIpAbuseVelocityCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.IpAbuseVelocityCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetIpAbuseVelocityCondition() *LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition {
	return v.LeafConditionFields.IpAbuseVelocityCondition
}

// GetKeyValueCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.KeyValueCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetKeyValueCondition() *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition {
	return v.LeafConditionFields.KeyValueCondition
}

// GetRegionCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.RegionCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetRegionCondition() *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition {
	return v.LeafConditionFields.RegionCondition
}

// GetRequestScannerTypeCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.RequestScannerTypeCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetRequestScannerTypeCondition() *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition {
	return v.LeafConditionFields.RequestScannerTypeCondition
}

// GetScopeCondition returns RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition.ScopeCondition, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) GetScopeCondition() *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition {
	return v.LeafConditionFields.ScopeCondition
}

func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition
		graphql.NoUnmarshalJSON
	}
	firstPass.RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LeafConditionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition struct {
	ConditionType RateLimitingRuleLeafConditionType `json:"conditionType"`

	DatatypeCondition *LeafConditionFieldsDatatypeConditionRateLimitingRuleDatatypeCondition `json:"datatypeCondition"`

	IpAddressCondition *LeafConditionFieldsIpAddressConditionRateLimitingRuleIpAddressCondition `json:"ipAddressCondition"`

	IpReputationCondition *LeafConditionFieldsIpReputationConditionRateLimitingRuleIpReputationCondition `json:"ipReputationCondition"`

	IpLocationTypeCondition *LeafConditionFieldsIpLocationTypeConditionRateLimitingRuleIpLocationTypeCondition `json:"ipLocationTypeCondition"`

	EmailDomainCondition *LeafConditionFieldsEmailDomainConditionRateLimitingRuleEmailDomainCondition `json:"emailDomainCondition"`

	IpOrganisationCondition *LeafConditionFieldsIpOrganisationConditionRateLimitingRuleIpOrganisationCondition `json:"ipOrganisationCondition"`

	IpAsnCondition *LeafConditionFieldsIpAsnConditionRateLimitingRuleIpAsnCondition `json:"ipAsnCondition"`

	UserIdCondition *LeafConditionFieldsUserIdConditionRateLimitingRuleUserIdCondition `json:"userIdCondition"`

	UserAgentCondition *LeafConditionFieldsUserAgentConditionRateLimitingRuleUserAgentCondition `json:"userAgentCondition"`

	IpConnectionTypeCondition *LeafConditionFieldsIpConnectionTypeConditionRateLimitingRuleIpConnectionTypeCondition `json:"ipConnectionTypeCondition"`

	IpAbuseVelocityCondition *LeafConditionFieldsIpAbuseVelocityConditionRateLimitingRuleIpAbuseVelocityCondition `json:"ipAbuseVelocityCondition"`

	KeyValueCondition *LeafConditionFieldsKeyValueConditionRateLimitingRuleKeyValueCondition `json:"keyValueCondition"`

	RegionCondition *LeafConditionFieldsRegionConditionRateLimitingRuleRegionCondition `json:"regionCondition"`

	RequestScannerTypeCondition *LeafConditionFieldsRequestScannerTypeConditionRateLimitingRuleRequestScannerTypeCondition `json:"requestScannerTypeCondition"`

	ScopeCondition *LeafConditionFieldsScopeConditionRateLimitingRuleScopeCondition `json:"scopeCondition"`
}

func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition) __premarshalJSON() (*__premarshalRateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition, error) {
	var retval __premarshalRateLimitingRuleFieldsConditionsRateLimitingRuleConditionLeafConditionRateLimitingRuleLeafCondition

	retval.ConditionType = v.LeafConditionFields.ConditionType
	retval.DatatypeCondition = v.LeafConditionFields.DatatypeCondition
	retval.IpAddressCondition = v.LeafConditionFields.IpAddressCondition
	retval.IpReputationCondition = v.LeafConditionFields.IpReputationCondition
	retval.IpLocationTypeCondition = v.LeafConditionFields.IpLocationTypeCondition
	retval.EmailDomainCondition = v.LeafConditionFields.EmailDomainCondition
	retval.IpOrganisationCondition = v.LeafConditionFields.IpOrganisationCondition
	retval.IpAsnCondition = v.LeafConditionFields.IpAsnCondition
	retval.UserIdCondition = v.LeafConditionFields.UserIdCondition
	retval.UserAgentCondition = v.LeafConditionFields.UserAgentCondition
	retval.IpConnectionTypeCondition = v.LeafConditionFields.IpConnectionTypeCondition
	retval.IpAbuseVelocityCondition = v.LeafConditionFields.IpAbuseVelocityCondition
	retval.KeyValueCondition = v.LeafConditionFields.KeyValueCondition
	retval.RegionCondition = v.LeafConditionFields.RegionCondition
	retval.RequestScannerTypeCondition = v.LeafConditionFields.RequestScannerTypeCondition
	retval.ScopeCondition = v.LeafConditionFields.ScopeCondition
	return &retval, nil
}

// RateLimitingRuleFieldsLabelsRateLimitingRuleLabel includes the requested fields of the GraphQL type RateLimitingRuleLabel.
// The GraphQL type's documentation follows.
//
// Key-value pair for labels
type RateLimitingRuleFieldsLabelsRateLimitingRuleLabel struct {
	// Key
	Key string `json:"key"`
	// Value
	Value string `json:"value"`
}

// GetKey returns RateLimitingRuleFieldsLabelsRateLimitingRuleLabel.Key, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsLabelsRateLimitingRuleLabel) GetKey() string { return v.Key }

// GetValue returns RateLimitingRuleFieldsLabelsRateLimitingRuleLabel.Value, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsLabelsRateLimitingRuleLabel) GetValue() string { return v.Value }

// RateLimitingRuleFieldsRuleConfigScope includes the requested fields of the GraphQL type RuleConfigScope.
// The GraphQL type's documentation follows.
//
// Rate limit rule scope
type RateLimitingRuleFieldsRuleConfigScope struct {
	RuleConfigScopeFields `json:"-"`
}

// GetEnvironmentScope returns RateLimitingRuleFieldsRuleConfigScope.EnvironmentScope, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsRuleConfigScope) GetEnvironmentScope() *RuleConfigScopeFieldsEnvironmentScope {
	return v.RuleConfigScopeFields.EnvironmentScope
}

func (v *RateLimitingRuleFieldsRuleConfigScope) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RateLimitingRuleFieldsRuleConfigScope
		graphql.NoUnmarshalJSON
	}
	firstPass.RateLimitingRuleFieldsRuleConfigScope = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RuleConfigScopeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRateLimitingRuleFieldsRuleConfigScope struct {
	EnvironmentScope *RuleConfigScopeFieldsEnvironmentScope `json:"environmentScope"`
}

func (v *RateLimitingRuleFieldsRuleConfigScope) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RateLimitingRuleFieldsRuleConfigScope) __premarshalJSON() (*__premarshalRateLimitingRuleFieldsRuleConfigScope, error) {
	var retval __premarshalRateLimitingRuleFieldsRuleConfigScope

	retval.EnvironmentScope = v.RuleConfigScopeFields.EnvironmentScope
	return &retval, nil
}

// RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus includes the requested fields of the GraphQL type RateLimitingRuleStatus.
// The GraphQL type's documentation follows.
//
// Status of rate limit rule
type RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus struct {
	RuleStatusFields `json:"-"`
}

// GetInternal returns RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus.Internal, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus) GetInternal() *bool {
	return v.RuleStatusFields.Internal
}

// GetRuleCreationSource returns RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus.RuleCreationSource, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus) GetRuleCreationSource() *RateLimitingRuleSource {
	return v.RuleStatusFields.RuleCreationSource
}

func (v *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus
		graphql.NoUnmarshalJSON
	}
	firstPass.RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RuleStatusFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus struct {
	Internal *bool `json:"internal"`

	RuleCreationSource *RateLimitingRuleSource `json:"ruleCreationSource"`
}

func (v *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus) __premarshalJSON() (*__premarshalRateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus, error) {
	var retval __premarshalRateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus

	retval.Internal = v.RuleStatusFields.Internal
	retval.RuleCreationSource = v.RuleStatusFields.RuleCreationSource
	return &retval, nil
}

// RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig includes the requested fields of the GraphQL type RateLimitingRuleThresholdActionConfig.
// The GraphQL type's documentation follows.
//
// Config for thresholds and actions applicable on a rate limit rule
type RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig struct {
	ThresholdActionConfigFields `json:"-"`
}

// GetActions returns RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig.Actions, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig) GetActions() []*ThresholdActionConfigFieldsActionsRateLimitingRuleAction {
	return v.ThresholdActionConfigFields.Actions
}

// GetThresholdConfigs returns RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig.ThresholdConfigs, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig) GetThresholdConfigs() []*ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig {
	return v.ThresholdActionConfigFields.ThresholdConfigs
}

func (v *RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ThresholdActionConfigFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig struct {
	Actions []*ThresholdActionConfigFieldsActionsRateLimitingRuleAction `json:"actions"`

	ThresholdConfigs []*ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig `json:"thresholdConfigs"`
}

func (v *RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig) __premarshalJSON() (*__premarshalRateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig, error) {
	var retval __premarshalRateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig

	retval.Actions = v.ThresholdActionConfigFields.Actions
	retval.ThresholdConfigs = v.ThresholdActionConfigFields.ThresholdConfigs
	return &retval, nil
}

// RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig includes the requested fields of the GraphQL type RateLimitingTransactionActionConfig.
// The GraphQL type's documentation follows.
//
// Rate limit rule transaction action config
type RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig struct {
	TransactionActionConfigFields `json:"-"`
}

// GetAction returns RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig.Action, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig) GetAction() TransactionActionConfigFieldsActionRateLimitingRuleAction {
	return v.TransactionActionConfigFields.Action
}

// GetExpirationTimestamp returns RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig.ExpirationTimestamp, and is useful for accessing the field via an interface.
func (v *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig) GetExpirationTimestamp() *string {
	return v.TransactionActionConfigFields.ExpirationTimestamp
}

func (v *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TransactionActionConfigFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig struct {
	Action TransactionActionConfigFieldsActionRateLimitingRuleAction `json:"action"`

	ExpirationTimestamp *string `json:"expirationTimestamp"`
}

func (v *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig) __premarshalJSON() (*__premarshalRateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig, error) {
	var retval __premarshalRateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig

	retval.Action = v.TransactionActionConfigFields.Action
	retval.ExpirationTimestamp = v.TransactionActionConfigFields.ExpirationTimestamp
	return &retval, nil
}

type RateLimitingRuleIpAbuseVelocity string

const (
	// LOW
	RateLimitingRuleIpAbuseVelocityLow RateLimitingRuleIpAbuseVelocity = "LOW"
	// MEDIUM
	RateLimitingRuleIpAbuseVelocityMedium RateLimitingRuleIpAbuseVelocity = "MEDIUM"
	// HIGH
	RateLimitingRuleIpAbuseVelocityHigh RateLimitingRuleIpAbuseVelocity = "HIGH"
)

var AllRateLimitingRuleIpAbuseVelocity = []RateLimitingRuleIpAbuseVelocity{
	RateLimitingRuleIpAbuseVelocityLow,
	RateLimitingRuleIpAbuseVelocityMedium,
	RateLimitingRuleIpAbuseVelocityHigh,
}

// Ip address condition type
type RateLimitingRuleIpAddressConditionType string

const (
	// All internal ip address condition type
	RateLimitingRuleIpAddressConditionTypeAllInternal RateLimitingRuleIpAddressConditionType = "ALL_INTERNAL"
	// All external ip address condition type
	RateLimitingRuleIpAddressConditionTypeAllExternal RateLimitingRuleIpAddressConditionType = "ALL_EXTERNAL"
)

var AllRateLimitingRuleIpAddressConditionType = []RateLimitingRuleIpAddressConditionType{
	RateLimitingRuleIpAddressConditionTypeAllInternal,
	RateLimitingRuleIpAddressConditionTypeAllExternal,
}

// IP connection types for rate limit rule IP connection type condition
type RateLimitingRuleIpConnectionType string

const (
	// RESIDENTIAL
	RateLimitingRuleIpConnectionTypeResidential RateLimitingRuleIpConnectionType = "RESIDENTIAL"
	// MOBILE
	RateLimitingRuleIpConnectionTypeMobile RateLimitingRuleIpConnectionType = "MOBILE"
	// CORPORATE
	RateLimitingRuleIpConnectionTypeCorporate RateLimitingRuleIpConnectionType = "CORPORATE"
	// DATA_CENTER
	RateLimitingRuleIpConnectionTypeDataCenter RateLimitingRuleIpConnectionType = "DATA_CENTER"
	// EDUCATION
	RateLimitingRuleIpConnectionTypeEducation RateLimitingRuleIpConnectionType = "EDUCATION"
)

var AllRateLimitingRuleIpConnectionType = []RateLimitingRuleIpConnectionType{
	RateLimitingRuleIpConnectionTypeResidential,
	RateLimitingRuleIpConnectionTypeMobile,
	RateLimitingRuleIpConnectionTypeCorporate,
	RateLimitingRuleIpConnectionTypeDataCenter,
	RateLimitingRuleIpConnectionTypeEducation,
}

type RateLimitingRuleIpLocationType string

const (
	// RESIDENTIAL
	RateLimitingRuleIpLocationTypeResidential RateLimitingRuleIpLocationType = "RESIDENTIAL"
	// ANONYMOUS
	RateLimitingRuleIpLocationTypeAnonymous RateLimitingRuleIpLocationType = "ANONYMOUS"
	// ANONYMOUS_VPN
	RateLimitingRuleIpLocationTypeAnonymousVpn RateLimitingRuleIpLocationType = "ANONYMOUS_VPN"
	// HOSTING_PROVIDER
	RateLimitingRuleIpLocationTypeHostingProvider RateLimitingRuleIpLocationType = "HOSTING_PROVIDER"
	// PUBLIC_PROXY
	RateLimitingRuleIpLocationTypePublicProxy RateLimitingRuleIpLocationType = "PUBLIC_PROXY"
	// TOR_EXIT_NODE
	RateLimitingRuleIpLocationTypeTorExitNode RateLimitingRuleIpLocationType = "TOR_EXIT_NODE"
	// BOT
	RateLimitingRuleIpLocationTypeBot RateLimitingRuleIpLocationType = "BOT"
	// SCANNER
	RateLimitingRuleIpLocationTypeScanner RateLimitingRuleIpLocationType = "SCANNER"
)

var AllRateLimitingRuleIpLocationType = []RateLimitingRuleIpLocationType{
	RateLimitingRuleIpLocationTypeResidential,
	RateLimitingRuleIpLocationTypeAnonymous,
	RateLimitingRuleIpLocationTypeAnonymousVpn,
	RateLimitingRuleIpLocationTypeHostingProvider,
	RateLimitingRuleIpLocationTypePublicProxy,
	RateLimitingRuleIpLocationTypeTorExitNode,
	RateLimitingRuleIpLocationTypeBot,
	RateLimitingRuleIpLocationTypeScanner,
}

type RateLimitingRuleIpReputationSeverity string

const (
	// LOW
	RateLimitingRuleIpReputationSeverityLow RateLimitingRuleIpReputationSeverity = "LOW"
	// MEDIUM
	RateLimitingRuleIpReputationSeverityMedium RateLimitingRuleIpReputationSeverity = "MEDIUM"
	// HIGH
	RateLimitingRuleIpReputationSeverityHigh RateLimitingRuleIpReputationSeverity = "HIGH"
	// CRITICAL
	RateLimitingRuleIpReputationSeverityCritical RateLimitingRuleIpReputationSeverity = "CRITICAL"
)

var AllRateLimitingRuleIpReputationSeverity = []RateLimitingRuleIpReputationSeverity{
	RateLimitingRuleIpReputationSeverityLow,
	RateLimitingRuleIpReputationSeverityMedium,
	RateLimitingRuleIpReputationSeverityHigh,
	RateLimitingRuleIpReputationSeverityCritical,
}

type RateLimitingRuleKeyValueConditionMetadataType string

const (
	// URL
	RateLimitingRuleKeyValueConditionMetadataTypeUrl RateLimitingRuleKeyValueConditionMetadataType = "URL"
	// HOST
	RateLimitingRuleKeyValueConditionMetadataTypeHost RateLimitingRuleKeyValueConditionMetadataType = "HOST"
	// HTTP_METHOD
	RateLimitingRuleKeyValueConditionMetadataTypeHttpMethod RateLimitingRuleKeyValueConditionMetadataType = "HTTP_METHOD"
	// USER_AGENT
	RateLimitingRuleKeyValueConditionMetadataTypeUserAgent RateLimitingRuleKeyValueConditionMetadataType = "USER_AGENT"
	// QUERY_PARAMETER
	RateLimitingRuleKeyValueConditionMetadataTypeQueryParameter RateLimitingRuleKeyValueConditionMetadataType = "QUERY_PARAMETER"
	// STATUS_CODE
	RateLimitingRuleKeyValueConditionMetadataTypeStatusCode RateLimitingRuleKeyValueConditionMetadataType = "STATUS_CODE"
	// REQUEST_BODY
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBody RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_BODY"
	// RESPONSE_BODY
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBody RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_BODY"
	// REQUEST_HEADER
	RateLimitingRuleKeyValueConditionMetadataTypeRequestHeader RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_HEADER"
	// RESPONSE_HEADER
	RateLimitingRuleKeyValueConditionMetadataTypeResponseHeader RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_HEADER"
	// REQUEST_COOKIE
	RateLimitingRuleKeyValueConditionMetadataTypeRequestCookie RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_COOKIE"
	// RESPONSE_COOKIE
	RateLimitingRuleKeyValueConditionMetadataTypeResponseCookie RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_COOKIE"
	// REQUEST_BODY_PARAMETER
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBodyParameter RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_BODY_PARAMETER"
	// RESPONSE_BODY_PARAMETER
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBodyParameter RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_BODY_PARAMETER"
	// TAG
	RateLimitingRuleKeyValueConditionMetadataTypeTag RateLimitingRuleKeyValueConditionMetadataType = "TAG"
	// REQUEST_BODY_SIZE
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBodySize RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_BODY_SIZE"
	// RESPONSE_BODY_SIZE
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBodySize RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_BODY_SIZE"
	// QUERY_PARAMS_COUNT
	RateLimitingRuleKeyValueConditionMetadataTypeQueryParamsCount RateLimitingRuleKeyValueConditionMetadataType = "QUERY_PARAMS_COUNT"
	// REQUEST_HEADERS_COUNT
	RateLimitingRuleKeyValueConditionMetadataTypeRequestHeadersCount RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_HEADERS_COUNT"
	// RESPONSE_HEADERS_COUNT
	RateLimitingRuleKeyValueConditionMetadataTypeResponseHeadersCount RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_HEADERS_COUNT"
	// REQUEST_COOKIES_COUNT
	RateLimitingRuleKeyValueConditionMetadataTypeRequestCookiesCount RateLimitingRuleKeyValueConditionMetadataType = "REQUEST_COOKIES_COUNT"
	// RESPONSE_COOKIES_COUNT
	RateLimitingRuleKeyValueConditionMetadataTypeResponseCookiesCount RateLimitingRuleKeyValueConditionMetadataType = "RESPONSE_COOKIES_COUNT"
)

var AllRateLimitingRuleKeyValueConditionMetadataType = []RateLimitingRuleKeyValueConditionMetadataType{
	RateLimitingRuleKeyValueConditionMetadataTypeUrl,
	RateLimitingRuleKeyValueConditionMetadataTypeHost,
	RateLimitingRuleKeyValueConditionMetadataTypeHttpMethod,
	RateLimitingRuleKeyValueConditionMetadataTypeUserAgent,
	RateLimitingRuleKeyValueConditionMetadataTypeQueryParameter,
	RateLimitingRuleKeyValueConditionMetadataTypeStatusCode,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBody,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBody,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestHeader,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseHeader,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestCookie,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseCookie,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBodyParameter,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBodyParameter,
	RateLimitingRuleKeyValueConditionMetadataTypeTag,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestBodySize,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseBodySize,
	RateLimitingRuleKeyValueConditionMetadataTypeQueryParamsCount,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestHeadersCount,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseHeadersCount,
	RateLimitingRuleKeyValueConditionMetadataTypeRequestCookiesCount,
	RateLimitingRuleKeyValueConditionMetadataTypeResponseCookiesCount,
}

type RateLimitingRuleKeyValueMatchOperator string

const (
	// EQUALS
	RateLimitingRuleKeyValueMatchOperatorEquals RateLimitingRuleKeyValueMatchOperator = "EQUALS"
	// NOT_EQUAL
	RateLimitingRuleKeyValueMatchOperatorNotEqual RateLimitingRuleKeyValueMatchOperator = "NOT_EQUAL"
	// MATCHES_REGEX
	RateLimitingRuleKeyValueMatchOperatorMatchesRegex RateLimitingRuleKeyValueMatchOperator = "MATCHES_REGEX"
	// NOT_MATCH_REGEX
	RateLimitingRuleKeyValueMatchOperatorNotMatchRegex RateLimitingRuleKeyValueMatchOperator = "NOT_MATCH_REGEX"
	// CONTAINS
	RateLimitingRuleKeyValueMatchOperatorContains RateLimitingRuleKeyValueMatchOperator = "CONTAINS"
	// NOT_CONTAIN
	RateLimitingRuleKeyValueMatchOperatorNotContain RateLimitingRuleKeyValueMatchOperator = "NOT_CONTAIN"
	// GREATER_THAN
	RateLimitingRuleKeyValueMatchOperatorGreaterThan RateLimitingRuleKeyValueMatchOperator = "GREATER_THAN"
	// LESS_THAN
	RateLimitingRuleKeyValueMatchOperatorLessThan RateLimitingRuleKeyValueMatchOperator = "LESS_THAN"
)

var AllRateLimitingRuleKeyValueMatchOperator = []RateLimitingRuleKeyValueMatchOperator{
	RateLimitingRuleKeyValueMatchOperatorEquals,
	RateLimitingRuleKeyValueMatchOperatorNotEqual,
	RateLimitingRuleKeyValueMatchOperatorMatchesRegex,
	RateLimitingRuleKeyValueMatchOperatorNotMatchRegex,
	RateLimitingRuleKeyValueMatchOperatorContains,
	RateLimitingRuleKeyValueMatchOperatorNotContain,
	RateLimitingRuleKeyValueMatchOperatorGreaterThan,
	RateLimitingRuleKeyValueMatchOperatorLessThan,
}

type RateLimitingRuleLabelType string

const (
	// SERVICE
	RateLimitingRuleLabelTypeService RateLimitingRuleLabelType = "SERVICE"
	// API
	RateLimitingRuleLabelTypeApi RateLimitingRuleLabelType = "API"
)

var AllRateLimitingRuleLabelType = []RateLimitingRuleLabelType{
	RateLimitingRuleLabelTypeService,
	RateLimitingRuleLabelTypeApi,
}

type RateLimitingRuleLeafConditionType string

const (
	// SCOPE
	RateLimitingRuleLeafConditionTypeScope RateLimitingRuleLeafConditionType = "SCOPE"
	// DATATYPE
	RateLimitingRuleLeafConditionTypeDatatype RateLimitingRuleLeafConditionType = "DATATYPE"
	// IP_ADDRESS
	RateLimitingRuleLeafConditionTypeIpAddress RateLimitingRuleLeafConditionType = "IP_ADDRESS"
	// KEY_VALUE
	RateLimitingRuleLeafConditionTypeKeyValue RateLimitingRuleLeafConditionType = "KEY_VALUE"
	// IP_LOCATION_TYPE
	RateLimitingRuleLeafConditionTypeIpLocationType RateLimitingRuleLeafConditionType = "IP_LOCATION_TYPE"
	// IP_REPUTATION
	RateLimitingRuleLeafConditionTypeIpReputation RateLimitingRuleLeafConditionType = "IP_REPUTATION"
	// REGION
	RateLimitingRuleLeafConditionTypeRegion RateLimitingRuleLeafConditionType = "REGION"
	// EMAIL_DOMAIN
	RateLimitingRuleLeafConditionTypeEmailDomain RateLimitingRuleLeafConditionType = "EMAIL_DOMAIN"
	// IP_CONNECTION_TYPE
	RateLimitingRuleLeafConditionTypeIpConnectionType RateLimitingRuleLeafConditionType = "IP_CONNECTION_TYPE"
	// USER_AGENT
	RateLimitingRuleLeafConditionTypeUserAgent RateLimitingRuleLeafConditionType = "USER_AGENT"
	// USER_ID
	RateLimitingRuleLeafConditionTypeUserId RateLimitingRuleLeafConditionType = "USER_ID"
	// IP_ORGANISATION
	RateLimitingRuleLeafConditionTypeIpOrganisation RateLimitingRuleLeafConditionType = "IP_ORGANISATION"
	// IP_ASN
	RateLimitingRuleLeafConditionTypeIpAsn RateLimitingRuleLeafConditionType = "IP_ASN"
	// IP_ABUSE_VELOCITY
	RateLimitingRuleLeafConditionTypeIpAbuseVelocity RateLimitingRuleLeafConditionType = "IP_ABUSE_VELOCITY"
	// REQUEST_SCANNER_TYPE
	RateLimitingRuleLeafConditionTypeRequestScannerType RateLimitingRuleLeafConditionType = "REQUEST_SCANNER_TYPE"
)

var AllRateLimitingRuleLeafConditionType = []RateLimitingRuleLeafConditionType{
	RateLimitingRuleLeafConditionTypeScope,
	RateLimitingRuleLeafConditionTypeDatatype,
	RateLimitingRuleLeafConditionTypeIpAddress,
	RateLimitingRuleLeafConditionTypeKeyValue,
	RateLimitingRuleLeafConditionTypeIpLocationType,
	RateLimitingRuleLeafConditionTypeIpReputation,
	RateLimitingRuleLeafConditionTypeRegion,
	RateLimitingRuleLeafConditionTypeEmailDomain,
	RateLimitingRuleLeafConditionTypeIpConnectionType,
	RateLimitingRuleLeafConditionTypeUserAgent,
	RateLimitingRuleLeafConditionTypeUserId,
	RateLimitingRuleLeafConditionTypeIpOrganisation,
	RateLimitingRuleLeafConditionTypeIpAsn,
	RateLimitingRuleLeafConditionTypeIpAbuseVelocity,
	RateLimitingRuleLeafConditionTypeRequestScannerType,
}

type RateLimitingRuleMatchCategory string

const (
	// REQUEST
	RateLimitingRuleMatchCategoryRequest RateLimitingRuleMatchCategory = "REQUEST"
	// RESPONSE
	RateLimitingRuleMatchCategoryResponse RateLimitingRuleMatchCategory = "RESPONSE"
)

var AllRateLimitingRuleMatchCategory = []RateLimitingRuleMatchCategory{
	RateLimitingRuleMatchCategoryRequest,
	RateLimitingRuleMatchCategoryResponse,
}

type RateLimitingRuleScopeConditionType string

const (
	// ENTITY
	RateLimitingRuleScopeConditionTypeEntity RateLimitingRuleScopeConditionType = "ENTITY"
	// LABEL
	RateLimitingRuleScopeConditionTypeLabel RateLimitingRuleScopeConditionType = "LABEL"
	// URL
	RateLimitingRuleScopeConditionTypeUrl RateLimitingRuleScopeConditionType = "URL"
)

var AllRateLimitingRuleScopeConditionType = []RateLimitingRuleScopeConditionType{
	RateLimitingRuleScopeConditionTypeEntity,
	RateLimitingRuleScopeConditionTypeLabel,
	RateLimitingRuleScopeConditionTypeUrl,
}

type RateLimitingRuleSource string

const (
	// DEFAULT
	RateLimitingRuleSourceDefault RateLimitingRuleSource = "DEFAULT"
	// CUSTOMER
	RateLimitingRuleSourceCustomer RateLimitingRuleSource = "CUSTOMER"
	// TRACEABLE
	RateLimitingRuleSourceTraceable RateLimitingRuleSource = "TRACEABLE"
)

var AllRateLimitingRuleSource = []RateLimitingRuleSource{
	RateLimitingRuleSourceDefault,
	RateLimitingRuleSourceCustomer,
	RateLimitingRuleSourceTraceable,
}

type RateLimitingRuleThresholdConfigType string

const (
	// ROLLING_WINDOW
	RateLimitingRuleThresholdConfigTypeRollingWindow RateLimitingRuleThresholdConfigType = "ROLLING_WINDOW"
	// VALUE_BASED
	RateLimitingRuleThresholdConfigTypeValueBased RateLimitingRuleThresholdConfigType = "VALUE_BASED"
	// DYNAMIC
	RateLimitingRuleThresholdConfigTypeDynamic RateLimitingRuleThresholdConfigType = "DYNAMIC"
)

var AllRateLimitingRuleThresholdConfigType = []RateLimitingRuleThresholdConfigType{
	RateLimitingRuleThresholdConfigTypeRollingWindow,
	RateLimitingRuleThresholdConfigTypeValueBased,
	RateLimitingRuleThresholdConfigTypeDynamic,
}

type RateLimitingRuleUserAggregateType string

const (
	// PER_USER
	RateLimitingRuleUserAggregateTypePerUser RateLimitingRuleUserAggregateType = "PER_USER"
	// ACROSS_USERS
	RateLimitingRuleUserAggregateTypeAcrossUsers RateLimitingRuleUserAggregateType = "ACROSS_USERS"
)

var AllRateLimitingRuleUserAggregateType = []RateLimitingRuleUserAggregateType{
	RateLimitingRuleUserAggregateTypePerUser,
	RateLimitingRuleUserAggregateTypeAcrossUsers,
}

// Fragment for ruleConfigScope
type RuleConfigScopeFields struct {
	// Environment scope applicable on rate limit rule
	EnvironmentScope *RuleConfigScopeFieldsEnvironmentScope `json:"environmentScope"`
}

// GetEnvironmentScope returns RuleConfigScopeFields.EnvironmentScope, and is useful for accessing the field via an interface.
func (v *RuleConfigScopeFields) GetEnvironmentScope() *RuleConfigScopeFieldsEnvironmentScope {
	return v.EnvironmentScope
}

// RuleConfigScopeFieldsEnvironmentScope includes the requested fields of the GraphQL type EnvironmentScope.
// The GraphQL type's documentation follows.
//
// Environment scope applicable for rate limit rule
type RuleConfigScopeFieldsEnvironmentScope struct {
	// List of environment ids applicable for rate limit rule
	EnvironmentIds []*string `json:"environmentIds"`
}

// GetEnvironmentIds returns RuleConfigScopeFieldsEnvironmentScope.EnvironmentIds, and is useful for accessing the field via an interface.
func (v *RuleConfigScopeFieldsEnvironmentScope) GetEnvironmentIds() []*string {
	return v.EnvironmentIds
}

// Fragment for ruleStatus
type RuleStatusFields struct {
	// Boolean denoting if rule should be internal and generate internal events
	Internal *bool `json:"internal"`
	// Source of rule creation
	RuleCreationSource *RateLimitingRuleSource `json:"ruleCreationSource"`
}

// GetInternal returns RuleStatusFields.Internal, and is useful for accessing the field via an interface.
func (v *RuleStatusFields) GetInternal() *bool { return v.Internal }

// GetRuleCreationSource returns RuleStatusFields.RuleCreationSource, and is useful for accessing the field via an interface.
func (v *RuleStatusFields) GetRuleCreationSource() *RateLimitingRuleSource {
	return v.RuleCreationSource
}

// Sensitive params evaluation type for it's corresponding value based threshold config
type SensitiveParamsEvaluationType string

const (
	// ALL
	SensitiveParamsEvaluationTypeAll SensitiveParamsEvaluationType = "ALL"
	// SELECTED_DATA_TYPES
	SensitiveParamsEvaluationTypeSelectedDataTypes SensitiveParamsEvaluationType = "SELECTED_DATA_TYPES"
)

var AllSensitiveParamsEvaluationType = []SensitiveParamsEvaluationType{
	SensitiveParamsEvaluationTypeAll,
	SensitiveParamsEvaluationTypeSelectedDataTypes,
}

// Fragment for thresholdActionConfigs
type ThresholdActionConfigFields struct {
	// List of rate limit rule actions
	Actions []*ThresholdActionConfigFieldsActionsRateLimitingRuleAction `json:"actions"`
	// List of rate limit rule threshold configs
	ThresholdConfigs []*ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig `json:"thresholdConfigs"`
}

// GetActions returns ThresholdActionConfigFields.Actions, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFields) GetActions() []*ThresholdActionConfigFieldsActionsRateLimitingRuleAction {
	return v.Actions
}

// GetThresholdConfigs returns ThresholdActionConfigFields.ThresholdConfigs, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFields) GetThresholdConfigs() []*ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig {
	return v.ThresholdConfigs
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleAction includes the requested fields of the GraphQL type RateLimitingRuleAction.
// The GraphQL type's documentation follows.
//
// Action to take if a rate limit rule is applicable
type ThresholdActionConfigFieldsActionsRateLimitingRuleAction struct {
	// Type of action
	ActionType RateLimitingRuleActionType `json:"actionType"`
	// Details regarding alert action
	Alert *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction `json:"alert"`
	// Details regarding block action
	Block *ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction `json:"block"`
	// Details regarding mark for testing action
	MarkForTesting *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction `json:"markForTesting"`
}

// GetActionType returns ThresholdActionConfigFieldsActionsRateLimitingRuleAction.ActionType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleAction) GetActionType() RateLimitingRuleActionType {
	return v.ActionType
}

// GetAlert returns ThresholdActionConfigFieldsActionsRateLimitingRuleAction.Alert, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleAction) GetAlert() *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction {
	return v.Alert
}

// GetBlock returns ThresholdActionConfigFieldsActionsRateLimitingRuleAction.Block, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleAction) GetBlock() *ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction {
	return v.Block
}

// GetMarkForTesting returns ThresholdActionConfigFieldsActionsRateLimitingRuleAction.MarkForTesting, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleAction) GetMarkForTesting() *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction {
	return v.MarkForTesting
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction includes the requested fields of the GraphQL type RateLimitingRuleAlertAction.
// The GraphQL type's documentation follows.
//
// Details regarding alert action applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction struct {
	// Severity of alert to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
	// Agent effect associated with this action
	AgentEffect *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect `json:"agentEffect"`
}

// GetEventSeverity returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// GetAgentEffect returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction.AgentEffect, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertAction) GetAgentEffect() *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect {
	return v.AgentEffect
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect includes the requested fields of the GraphQL type RateLimitingRuleAgentEffect.
// The GraphQL type's documentation follows.
//
// Details regarding agent effect applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect struct {
	// List of agent modifications to be done as part of rate limiting rule action
	AgentModifications []*ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification `json:"agentModifications"`
}

// GetAgentModifications returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect.AgentModifications, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffect) GetAgentModifications() []*ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification {
	return v.AgentModifications
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification includes the requested fields of the GraphQL type RateLimitingRuleAgentModification.
// The GraphQL type's documentation follows.
//
// Details regarding agent modification applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification struct {
	// Type of agent modification to be performed
	AgentModificationType RateLimitingRuleAgentModificationType `json:"agentModificationType"`
	// Details of header injection action
	HeaderInjection ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection `json:"headerInjection"`
}

// GetAgentModificationType returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification.AgentModificationType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification) GetAgentModificationType() RateLimitingRuleAgentModificationType {
	return v.AgentModificationType
}

// GetHeaderInjection returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification.HeaderInjection, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification) GetHeaderInjection() ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection {
	return v.HeaderInjection
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection includes the requested fields of the GraphQL type RateLimitingRuleHeaderInjection.
// The GraphQL type's documentation follows.
//
// Details regarding header injection applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection struct {
	// Header name to be injected
	Key string `json:"key"`
	// Header value to be injected
	Value string `json:"value"`
	// Category defining where the header needs to be injected
	HeaderCategory RateLimitingRuleMatchCategory `json:"headerCategory"`
}

// GetKey returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.Key, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetKey() string {
	return v.Key
}

// GetValue returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.Value, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetValue() string {
	return v.Value
}

// GetHeaderCategory returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.HeaderCategory, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionAlertRateLimitingRuleAlertActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetHeaderCategory() RateLimitingRuleMatchCategory {
	return v.HeaderCategory
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction includes the requested fields of the GraphQL type RateLimitingRuleBlockAction.
// The GraphQL type's documentation follows.
//
// Details regarding block action applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction struct {
	// Duration to block the malicious actor
	Duration *string `json:"duration"`
	// Severity of blocked event to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
	// Use duration in threshold config
	UseThresholdDuration *bool `json:"useThresholdDuration"`
}

// GetDuration returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction.Duration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction) GetDuration() *string {
	return v.Duration
}

// GetEventSeverity returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// GetUseThresholdDuration returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction.UseThresholdDuration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionBlockRateLimitingRuleBlockAction) GetUseThresholdDuration() *bool {
	return v.UseThresholdDuration
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction includes the requested fields of the GraphQL type RateLimitingRuleMarkForTestingAction.
// The GraphQL type's documentation follows.
//
// Details regarding mark for testing action applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction struct {
	// Severity of blocked event to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
	// Agent effect associated with this action
	AgentEffect *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect `json:"agentEffect"`
}

// GetEventSeverity returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// GetAgentEffect returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction.AgentEffect, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingAction) GetAgentEffect() *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect {
	return v.AgentEffect
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect includes the requested fields of the GraphQL type RateLimitingRuleAgentEffect.
// The GraphQL type's documentation follows.
//
// Details regarding agent effect applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect struct {
	// List of agent modifications to be done as part of rate limiting rule action
	AgentModifications []*ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification `json:"agentModifications"`
}

// GetAgentModifications returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect.AgentModifications, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffect) GetAgentModifications() []*ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification {
	return v.AgentModifications
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification includes the requested fields of the GraphQL type RateLimitingRuleAgentModification.
// The GraphQL type's documentation follows.
//
// Details regarding agent modification applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification struct {
	// Type of agent modification to be performed
	AgentModificationType RateLimitingRuleAgentModificationType `json:"agentModificationType"`
	// Details of header injection action
	HeaderInjection ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection `json:"headerInjection"`
}

// GetAgentModificationType returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification.AgentModificationType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification) GetAgentModificationType() RateLimitingRuleAgentModificationType {
	return v.AgentModificationType
}

// GetHeaderInjection returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification.HeaderInjection, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModification) GetHeaderInjection() ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection {
	return v.HeaderInjection
}

// ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection includes the requested fields of the GraphQL type RateLimitingRuleHeaderInjection.
// The GraphQL type's documentation follows.
//
// Details regarding header injection applicable on a rate limit rule
type ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection struct {
	// Header name to be injected
	Key string `json:"key"`
	// Header value to be injected
	Value string `json:"value"`
	// Category defining where the header needs to be injected
	HeaderCategory RateLimitingRuleMatchCategory `json:"headerCategory"`
}

// GetKey returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.Key, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetKey() string {
	return v.Key
}

// GetValue returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.Value, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetValue() string {
	return v.Value
}

// GetHeaderCategory returns ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection.HeaderCategory, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsActionsRateLimitingRuleActionMarkForTestingRateLimitingRuleMarkForTestingActionAgentEffectRateLimitingRuleAgentEffectAgentModificationsRateLimitingRuleAgentModificationHeaderInjectionRateLimitingRuleHeaderInjection) GetHeaderCategory() RateLimitingRuleMatchCategory {
	return v.HeaderCategory
}

// ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig includes the requested fields of the GraphQL type RateLimitingRuleThresholdConfig.
// The GraphQL type's documentation follows.
//
// Threshold config for rate limit rule
type ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig struct {
	// API aggregation type
	ApiAggregateType RateLimitingRuleApiAggregateType `json:"apiAggregateType"`
	// Rolling window threshold config
	RollingWindowThresholdConfig *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig `json:"rollingWindowThresholdConfig"`
	// Dynamic threshold config
	DynamicThresholdConfig *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig `json:"dynamicThresholdConfig"`
	// Value based threshold config
	ValueBasedThresholdConfig *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig `json:"valueBasedThresholdConfig"`
	// Threshold config type
	ThresholdConfigType RateLimitingRuleThresholdConfigType `json:"thresholdConfigType"`
	// User aggregation type
	UserAggregateType RateLimitingRuleUserAggregateType `json:"userAggregateType"`
}

// GetApiAggregateType returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.ApiAggregateType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetApiAggregateType() RateLimitingRuleApiAggregateType {
	return v.ApiAggregateType
}

// GetRollingWindowThresholdConfig returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.RollingWindowThresholdConfig, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetRollingWindowThresholdConfig() *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig {
	return v.RollingWindowThresholdConfig
}

// GetDynamicThresholdConfig returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.DynamicThresholdConfig, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetDynamicThresholdConfig() *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig {
	return v.DynamicThresholdConfig
}

// GetValueBasedThresholdConfig returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.ValueBasedThresholdConfig, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetValueBasedThresholdConfig() *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig {
	return v.ValueBasedThresholdConfig
}

// GetThresholdConfigType returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.ThresholdConfigType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetThresholdConfigType() RateLimitingRuleThresholdConfigType {
	return v.ThresholdConfigType
}

// GetUserAggregateType returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig.UserAggregateType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfig) GetUserAggregateType() RateLimitingRuleUserAggregateType {
	return v.UserAggregateType
}

// ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig includes the requested fields of the GraphQL type DynamicThresholdConfig.
// The GraphQL type's documentation follows.
//
// Threshold config which specifies percentage allowed exceeding a mean countwhich
// is calculated over the specified duration for the given time range
type ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig struct {
	// Allowed percentage exceeding mean
	PercentageExceedingMeanAllowed int64 `json:"percentageExceedingMeanAllowed"`
	// Duration for calculating mean over the specified time range
	MeanCalculationDuration string `json:"meanCalculationDuration"`
	// Time range over which mean and counts are calculated
	Duration string `json:"duration"`
}

// GetPercentageExceedingMeanAllowed returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig.PercentageExceedingMeanAllowed, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig) GetPercentageExceedingMeanAllowed() int64 {
	return v.PercentageExceedingMeanAllowed
}

// GetMeanCalculationDuration returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig.MeanCalculationDuration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig) GetMeanCalculationDuration() string {
	return v.MeanCalculationDuration
}

// GetDuration returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigDynamicThresholdConfig) GetDuration() string {
	return v.Duration
}

// ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig includes the requested fields of the GraphQL type RollingWindowThresholdConfig.
// The GraphQL type's documentation follows.
//
// Threshold config which specifies count allowed over the given time range
type ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig struct {
	// Count allowed for specified time range
	CountAllowed int64 `json:"countAllowed"`
	// Time range during which counts are calculated
	Duration string `json:"duration"`
}

// GetCountAllowed returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig.CountAllowed, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig) GetCountAllowed() int64 {
	return v.CountAllowed
}

// GetDuration returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigRollingWindowThresholdConfig) GetDuration() string {
	return v.Duration
}

// ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig includes the requested fields of the GraphQL type ValueBasedThresholdConfig.
// The GraphQL type's documentation follows.
//
// Threshold config which specifies unique values allowed over the given time range
type ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig struct {
	// Type of value based threshold config
	ValueType ValueBasedThresholdConfigType `json:"valueType"`
	// Unique values allowed for specified time range
	UniqueValuesAllowed int64 `json:"uniqueValuesAllowed"`
	// Time range during which unique values are calculated
	Duration string `json:"duration"`
	// Type of sensitive params evaluation, only applicable for sensitive params value type
	SensitiveParamsEvaluationType *SensitiveParamsEvaluationType `json:"sensitiveParamsEvaluationType"`
}

// GetValueType returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig.ValueType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig) GetValueType() ValueBasedThresholdConfigType {
	return v.ValueType
}

// GetUniqueValuesAllowed returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig.UniqueValuesAllowed, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig) GetUniqueValuesAllowed() int64 {
	return v.UniqueValuesAllowed
}

// GetDuration returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig.Duration, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig) GetDuration() string {
	return v.Duration
}

// GetSensitiveParamsEvaluationType returns ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig.SensitiveParamsEvaluationType, and is useful for accessing the field via an interface.
func (v *ThresholdActionConfigFieldsThresholdConfigsRateLimitingRuleThresholdConfigValueBasedThresholdConfig) GetSensitiveParamsEvaluationType() *SensitiveParamsEvaluationType {
	return v.SensitiveParamsEvaluationType
}

// Fragment for transactionActionConfigs
type TransactionActionConfigFields struct {
	// Rate limit rule action
	Action TransactionActionConfigFieldsActionRateLimitingRuleAction `json:"action"`
	// Requested expiration timestamp for the rule
	ExpirationTimestamp *string `json:"expirationTimestamp"`
}

// GetAction returns TransactionActionConfigFields.Action, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFields) GetAction() TransactionActionConfigFieldsActionRateLimitingRuleAction {
	return v.Action
}

// GetExpirationTimestamp returns TransactionActionConfigFields.ExpirationTimestamp, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFields) GetExpirationTimestamp() *string {
	return v.ExpirationTimestamp
}

// TransactionActionConfigFieldsActionRateLimitingRuleAction includes the requested fields of the GraphQL type RateLimitingRuleAction.
// The GraphQL type's documentation follows.
//
// Action to take if a rate limit rule is applicable
type TransactionActionConfigFieldsActionRateLimitingRuleAction struct {
	// Type of action
	ActionType RateLimitingRuleActionType `json:"actionType"`
	// Details regarding alert action
	Alert *TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction `json:"alert"`
	// Details regarding allow action
	Allow *TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction `json:"allow"`
	// Details regarding block action
	Block *TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction `json:"block"`
}

// GetActionType returns TransactionActionConfigFieldsActionRateLimitingRuleAction.ActionType, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleAction) GetActionType() RateLimitingRuleActionType {
	return v.ActionType
}

// GetAlert returns TransactionActionConfigFieldsActionRateLimitingRuleAction.Alert, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleAction) GetAlert() *TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction {
	return v.Alert
}

// GetAllow returns TransactionActionConfigFieldsActionRateLimitingRuleAction.Allow, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleAction) GetAllow() *TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction {
	return v.Allow
}

// GetBlock returns TransactionActionConfigFieldsActionRateLimitingRuleAction.Block, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleAction) GetBlock() *TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction {
	return v.Block
}

// TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction includes the requested fields of the GraphQL type RateLimitingRuleAlertAction.
// The GraphQL type's documentation follows.
//
// Details regarding alert action applicable on a rate limit rule
type TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction struct {
	// Severity of alert to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
}

// GetEventSeverity returns TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleActionAlertRateLimitingRuleAlertAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction includes the requested fields of the GraphQL type RateLimitingRuleAllowAction.
// The GraphQL type's documentation follows.
//
// Details regarding allow action applicable on a rate limit rule
type TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction struct {
	// Duration to allow the malicious actor
	Duration *string `json:"duration"`
}

// GetDuration returns TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction.Duration, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleActionAllowRateLimitingRuleAllowAction) GetDuration() *string {
	return v.Duration
}

// TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction includes the requested fields of the GraphQL type RateLimitingRuleBlockAction.
// The GraphQL type's documentation follows.
//
// Details regarding block action applicable on a rate limit rule
type TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction struct {
	// Duration to block the malicious actor
	Duration *string `json:"duration"`
	// Severity of blocked event to be generated
	EventSeverity RateLimitingRuleEventSeverity `json:"eventSeverity"`
}

// GetDuration returns TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction.Duration, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction) GetDuration() *string {
	return v.Duration
}

// GetEventSeverity returns TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction.EventSeverity, and is useful for accessing the field via an interface.
func (v *TransactionActionConfigFieldsActionRateLimitingRuleActionBlockRateLimitingRuleBlockAction) GetEventSeverity() RateLimitingRuleEventSeverity {
	return v.EventSeverity
}

// UpdateDataSetResponse is returned by UpdateDataSet on success.
type UpdateDataSetResponse struct {
	UpdateDataSet UpdateDataSetUpdateDataSet `json:"updateDataSet"`
}

// GetUpdateDataSet returns UpdateDataSetResponse.UpdateDataSet, and is useful for accessing the field via an interface.
func (v *UpdateDataSetResponse) GetUpdateDataSet() UpdateDataSetUpdateDataSet { return v.UpdateDataSet }

// UpdateDataSetUpdateDataSet includes the requested fields of the GraphQL type DataSet.
type UpdateDataSetUpdateDataSet struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	// An icon used to represent this Dataset visually
	IconType *string `json:"iconType"`
}

// GetId returns UpdateDataSetUpdateDataSet.Id, and is useful for accessing the field via an interface.
func (v *UpdateDataSetUpdateDataSet) GetId() string { return v.Id }

// GetName returns UpdateDataSetUpdateDataSet.Name, and is useful for accessing the field via an interface.
func (v *UpdateDataSetUpdateDataSet) GetName() string { return v.Name }

// GetDescription returns UpdateDataSetUpdateDataSet.Description, and is useful for accessing the field via an interface.
func (v *UpdateDataSetUpdateDataSet) GetDescription() *string { return v.Description }

// GetIconType returns UpdateDataSetUpdateDataSet.IconType, and is useful for accessing the field via an interface.
func (v *UpdateDataSetUpdateDataSet) GetIconType() *string { return v.IconType }

// UpdateRateLimitingRuleResponse is returned by UpdateRateLimitingRule on success.
type UpdateRateLimitingRuleResponse struct {
	UpdateRateLimitingRule UpdateRateLimitingRuleUpdateRateLimitingRule `json:"updateRateLimitingRule"`
}

// GetUpdateRateLimitingRule returns UpdateRateLimitingRuleResponse.UpdateRateLimitingRule, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleResponse) GetUpdateRateLimitingRule() UpdateRateLimitingRuleUpdateRateLimitingRule {
	return v.UpdateRateLimitingRule
}

// UpdateRateLimitingRuleUpdateRateLimitingRule includes the requested fields of the GraphQL type RateLimitingRule.
// The GraphQL type's documentation follows.
//
// Custom rule to protect endpoints and other services from brute-force attacks
type UpdateRateLimitingRuleUpdateRateLimitingRule struct {
	RateLimitingRuleFields `json:"-"`
}

// GetCategory returns UpdateRateLimitingRuleUpdateRateLimitingRule.Category, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetCategory() RateLimitingRuleCategory {
	return v.RateLimitingRuleFields.Category
}

// GetDescription returns UpdateRateLimitingRuleUpdateRateLimitingRule.Description, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetDescription() *string {
	return v.RateLimitingRuleFields.Description
}

// GetEnabled returns UpdateRateLimitingRuleUpdateRateLimitingRule.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetEnabled() bool {
	return v.RateLimitingRuleFields.Enabled
}

// GetId returns UpdateRateLimitingRuleUpdateRateLimitingRule.Id, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetId() string {
	return v.RateLimitingRuleFields.Id
}

// GetName returns UpdateRateLimitingRuleUpdateRateLimitingRule.Name, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetName() string {
	return v.RateLimitingRuleFields.Name
}

// GetLabels returns UpdateRateLimitingRuleUpdateRateLimitingRule.Labels, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetLabels() []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel {
	return v.RateLimitingRuleFields.Labels
}

// GetThresholdActionConfigs returns UpdateRateLimitingRuleUpdateRateLimitingRule.ThresholdActionConfigs, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetThresholdActionConfigs() []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig {
	return v.RateLimitingRuleFields.ThresholdActionConfigs
}

// GetTransactionActionConfigs returns UpdateRateLimitingRuleUpdateRateLimitingRule.TransactionActionConfigs, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetTransactionActionConfigs() *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig {
	return v.RateLimitingRuleFields.TransactionActionConfigs
}

// GetRuleConfigScope returns UpdateRateLimitingRuleUpdateRateLimitingRule.RuleConfigScope, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetRuleConfigScope() *RateLimitingRuleFieldsRuleConfigScope {
	return v.RateLimitingRuleFields.RuleConfigScope
}

// GetRuleStatus returns UpdateRateLimitingRuleUpdateRateLimitingRule.RuleStatus, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetRuleStatus() *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus {
	return v.RateLimitingRuleFields.RuleStatus
}

// GetConditions returns UpdateRateLimitingRuleUpdateRateLimitingRule.Conditions, and is useful for accessing the field via an interface.
func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) GetConditions() []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition {
	return v.RateLimitingRuleFields.Conditions
}

func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRateLimitingRuleUpdateRateLimitingRule
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRateLimitingRuleUpdateRateLimitingRule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RateLimitingRuleFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRateLimitingRuleUpdateRateLimitingRule struct {
	Category RateLimitingRuleCategory `json:"category"`

	Description *string `json:"description"`

	Enabled bool `json:"enabled"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []*RateLimitingRuleFieldsLabelsRateLimitingRuleLabel `json:"labels"`

	ThresholdActionConfigs []*RateLimitingRuleFieldsThresholdActionConfigsRateLimitingRuleThresholdActionConfig `json:"thresholdActionConfigs"`

	TransactionActionConfigs *RateLimitingRuleFieldsTransactionActionConfigsRateLimitingTransactionActionConfig `json:"transactionActionConfigs"`

	RuleConfigScope *RateLimitingRuleFieldsRuleConfigScope `json:"ruleConfigScope"`

	RuleStatus *RateLimitingRuleFieldsRuleStatusRateLimitingRuleStatus `json:"ruleStatus"`

	Conditions []*RateLimitingRuleFieldsConditionsRateLimitingRuleCondition `json:"conditions"`
}

func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRateLimitingRuleUpdateRateLimitingRule) __premarshalJSON() (*__premarshalUpdateRateLimitingRuleUpdateRateLimitingRule, error) {
	var retval __premarshalUpdateRateLimitingRuleUpdateRateLimitingRule

	retval.Category = v.RateLimitingRuleFields.Category
	retval.Description = v.RateLimitingRuleFields.Description
	retval.Enabled = v.RateLimitingRuleFields.Enabled
	retval.Id = v.RateLimitingRuleFields.Id
	retval.Name = v.RateLimitingRuleFields.Name
	retval.Labels = v.RateLimitingRuleFields.Labels
	retval.ThresholdActionConfigs = v.RateLimitingRuleFields.ThresholdActionConfigs
	retval.TransactionActionConfigs = v.RateLimitingRuleFields.TransactionActionConfigs
	retval.RuleConfigScope = v.RateLimitingRuleFields.RuleConfigScope
	retval.RuleStatus = v.RateLimitingRuleFields.RuleStatus
	retval.Conditions = v.RateLimitingRuleFields.Conditions
	return &retval, nil
}

// Type of value based threshold config
type ValueBasedThresholdConfigType string

const (
	// REQUEST_BODY
	ValueBasedThresholdConfigTypeRequestBody ValueBasedThresholdConfigType = "REQUEST_BODY"
	// SENSITIVE_PARAMS
	ValueBasedThresholdConfigTypeSensitiveParams ValueBasedThresholdConfigType = "SENSITIVE_PARAMS"
	// PATH_PARAMS
	ValueBasedThresholdConfigTypePathParams ValueBasedThresholdConfigType = "PATH_PARAMS"
)

var AllValueBasedThresholdConfigType = []ValueBasedThresholdConfigType{
	ValueBasedThresholdConfigTypeRequestBody,
	ValueBasedThresholdConfigTypeSensitiveParams,
	ValueBasedThresholdConfigTypePathParams,
}

// __CreateDataSetInput is used internally by genqlient
type __CreateDataSetInput struct {
	DataSetCreate InputDataSetCreate `json:"dataSetCreate"`
}

// GetDataSetCreate returns __CreateDataSetInput.DataSetCreate, and is useful for accessing the field via an interface.
func (v *__CreateDataSetInput) GetDataSetCreate() InputDataSetCreate { return v.DataSetCreate }

// __CreateRateLimitingRuleInput is used internally by genqlient
type __CreateRateLimitingRuleInput struct {
	Input InputRateLimitingRuleData `json:"input"`
}

// GetInput returns __CreateRateLimitingRuleInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateRateLimitingRuleInput) GetInput() InputRateLimitingRuleData { return v.Input }

// __DeleteDataSetInput is used internally by genqlient
type __DeleteDataSetInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSetInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSetInput) GetId() string { return v.Id }

// __DeleteRateLimitingRuleInput is used internally by genqlient
type __DeleteRateLimitingRuleInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteRateLimitingRuleInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteRateLimitingRuleInput) GetId() string { return v.Id }

// __GetRateLimitingDetailsInput is used internally by genqlient
type __GetRateLimitingDetailsInput struct {
	Category                []*RateLimitingRuleCategory   `json:"category"`
	RateLimitingRulesFilter *InputRateLimitingRulesFilter `json:"rateLimitingRulesFilter"`
}

// GetCategory returns __GetRateLimitingDetailsInput.Category, and is useful for accessing the field via an interface.
func (v *__GetRateLimitingDetailsInput) GetCategory() []*RateLimitingRuleCategory { return v.Category }

// GetRateLimitingRulesFilter returns __GetRateLimitingDetailsInput.RateLimitingRulesFilter, and is useful for accessing the field via an interface.
func (v *__GetRateLimitingDetailsInput) GetRateLimitingRulesFilter() *InputRateLimitingRulesFilter {
	return v.RateLimitingRulesFilter
}

// __GetRateLimitingRulesNameInput is used internally by genqlient
type __GetRateLimitingRulesNameInput struct {
	Category                []*RateLimitingRuleCategory   `json:"category"`
	RateLimitingRulesFilter *InputRateLimitingRulesFilter `json:"rateLimitingRulesFilter"`
}

// GetCategory returns __GetRateLimitingRulesNameInput.Category, and is useful for accessing the field via an interface.
func (v *__GetRateLimitingRulesNameInput) GetCategory() []*RateLimitingRuleCategory {
	return v.Category
}

// GetRateLimitingRulesFilter returns __GetRateLimitingRulesNameInput.RateLimitingRulesFilter, and is useful for accessing the field via an interface.
func (v *__GetRateLimitingRulesNameInput) GetRateLimitingRulesFilter() *InputRateLimitingRulesFilter {
	return v.RateLimitingRulesFilter
}

// __UpdateDataSetInput is used internally by genqlient
type __UpdateDataSetInput struct {
	DataSetUpdate InputDataSetUpdate `json:"dataSetUpdate"`
}

// GetDataSetUpdate returns __UpdateDataSetInput.DataSetUpdate, and is useful for accessing the field via an interface.
func (v *__UpdateDataSetInput) GetDataSetUpdate() InputDataSetUpdate { return v.DataSetUpdate }

// __UpdateRateLimitingRuleInput is used internally by genqlient
type __UpdateRateLimitingRuleInput struct {
	Input InputRateLimitingRule `json:"input"`
}

// GetInput returns __UpdateRateLimitingRuleInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateRateLimitingRuleInput) GetInput() InputRateLimitingRule { return v.Input }

// The mutation executed by CreateDataSet.
const CreateDataSet_Operation = `
mutation CreateDataSet ($dataSetCreate: InputDataSetCreate!) {
	createDataSet(dataSetCreate: $dataSetCreate) {
		id
		name
		description
		iconType
	}
}
`

func CreateDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	dataSetCreate InputDataSetCreate,
) (data_ *CreateDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateDataSet",
		Query:  CreateDataSet_Operation,
		Variables: &__CreateDataSetInput{
			DataSetCreate: dataSetCreate,
		},
	}

	data_ = &CreateDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateRateLimitingRule.
const CreateRateLimitingRule_Operation = `
mutation CreateRateLimitingRule ($input: InputRateLimitingRuleData!) {
	createRateLimitingRule(rateLimitingRuleData: $input) {
		... RateLimitingRuleFields
	}
}
fragment RateLimitingRuleFields on RateLimitingRule {
	category
	description
	enabled
	id
	name
	labels {
		key
		value
	}
	thresholdActionConfigs {
		... ThresholdActionConfigFields
	}
	transactionActionConfigs {
		... TransactionActionConfigFields
	}
	ruleConfigScope {
		... RuleConfigScopeFields
	}
	ruleStatus {
		... RuleStatusFields
	}
	conditions {
		leafCondition {
			... LeafConditionFields
		}
	}
}
fragment ThresholdActionConfigFields on RateLimitingRuleThresholdActionConfig {
	actions {
		actionType
		alert {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
		block {
			duration
			eventSeverity
			useThresholdDuration
		}
		markForTesting {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
	}
	thresholdConfigs {
		apiAggregateType
		rollingWindowThresholdConfig {
			countAllowed
			duration
		}
		dynamicThresholdConfig {
			percentageExceedingMeanAllowed
			meanCalculationDuration
			duration
		}
		valueBasedThresholdConfig {
			valueType
			uniqueValuesAllowed
			duration
			sensitiveParamsEvaluationType
		}
		thresholdConfigType
		userAggregateType
	}
}
fragment TransactionActionConfigFields on RateLimitingTransactionActionConfig {
	action {
		actionType
		alert {
			eventSeverity
		}
		allow {
			duration
		}
		block {
			duration
			eventSeverity
		}
	}
	expirationTimestamp
}
fragment RuleConfigScopeFields on RuleConfigScope {
	environmentScope {
		environmentIds
	}
}
fragment RuleStatusFields on RateLimitingRuleStatus {
	internal
	ruleCreationSource
}
fragment LeafConditionFields on RateLimitingRuleLeafCondition {
	conditionType
	datatypeCondition {
		datasetIds
		datatypeIds
		dataLocation
		datatypeMatching {
			datatypeMatchingType
			regexBasedMatching {
				customMatchingLocation {
					metadataType
					keyCondition {
						operator
						value
					}
				}
			}
		}
	}
	ipAddressCondition {
		cidrIpRanges
		ipAddresses
		rawInputIpData
		exclude
		ipAddressConditionType
	}
	ipReputationCondition {
		minIpReputationSeverity
	}
	ipLocationTypeCondition {
		ipLocationTypes
		exclude
	}
	emailDomainCondition {
		emailRegexes
		exclude
	}
	ipOrganisationCondition {
		ipOrganisationRegexes
		exclude
	}
	ipAsnCondition {
		ipAsnRegexes
		exclude
	}
	userIdCondition {
		userIdRegexes
		userIds
		exclude
	}
	userAgentCondition {
		userAgentRegexes
		exclude
	}
	ipConnectionTypeCondition {
		ipConnectionTypes
		exclude
	}
	ipAbuseVelocityCondition {
		minIpAbuseVelocity
	}
	keyValueCondition {
		keyCondition {
			operator
			value
		}
		metadataType
		valueCondition {
			operator
			value
		}
	}
	regionCondition {
		regionIdentifiers {
			countryIsoCode
		}
		exclude
	}
	requestScannerTypeCondition {
		scannerTypes
		exclude
	}
	scopeCondition {
		entityScope {
			entityIds
			entityType
		}
		labelScope {
			labelIds
			labelType
		}
		scopeType
		urlScope {
			urlRegexes
		}
	}
}
`

func CreateRateLimitingRule(
	ctx_ context.Context,
	client_ graphql.Client,
	input InputRateLimitingRuleData,
) (data_ *CreateRateLimitingRuleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateRateLimitingRule",
		Query:  CreateRateLimitingRule_Operation,
		Variables: &__CreateRateLimitingRuleInput{
			Input: input,
		},
	}

	data_ = &CreateRateLimitingRuleResponse{}
	resp_ := &graphql.Response{Data: data_}
    

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)
	if len(resp_.Errors) > 0 {
		fmt.Printf("GraphQL Errors: %+v\n", resp_.Errors)
		fmt.Println("Shreyanshdebug",err_)
	}
	

	return data_, err_
}

// The query executed by DataSets.
const DataSets_Operation = `
query DataSets {
	dataSets {
		count
		results {
			id
			name
			description
			iconType
		}
		total
	}
}
`

func DataSets(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *DataSetsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DataSets",
		Query:  DataSets_Operation,
	}

	data_ = &DataSetsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteDataSet.
const DeleteDataSet_Operation = `
mutation DeleteDataSet ($id: String!) {
	deleteDataSet(id: $id)
}
`

func DeleteDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteDataSet",
		Query:  DeleteDataSet_Operation,
		Variables: &__DeleteDataSetInput{
			Id: id,
		},
	}

	data_ = &DeleteDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteRateLimitingRule.
const DeleteRateLimitingRule_Operation = `
mutation DeleteRateLimitingRule ($id: String!) {
	deleteRateLimitingRule(id: $id) {
		success
	}
}
`

func DeleteRateLimitingRule(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteRateLimitingRuleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteRateLimitingRule",
		Query:  DeleteRateLimitingRule_Operation,
		Variables: &__DeleteRateLimitingRuleInput{
			Id: id,
		},
	}

	data_ = &DeleteRateLimitingRuleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetRateLimitingDetails.
const GetRateLimitingDetails_Operation = `
query GetRateLimitingDetails ($category: [RateLimitingRuleCategory], $rateLimitingRulesFilter: InputRateLimitingRulesFilter) {
	rateLimitingRules(category: $category, rateLimitingRulesFilter: $rateLimitingRulesFilter) {
		count
		total
		results {
			... RateLimitingRuleFields
		}
	}
}
fragment RateLimitingRuleFields on RateLimitingRule {
	category
	description
	enabled
	id
	name
	labels {
		key
		value
	}
	thresholdActionConfigs {
		... ThresholdActionConfigFields
	}
	transactionActionConfigs {
		... TransactionActionConfigFields
	}
	ruleConfigScope {
		... RuleConfigScopeFields
	}
	ruleStatus {
		... RuleStatusFields
	}
	conditions {
		leafCondition {
			... LeafConditionFields
		}
	}
}
fragment ThresholdActionConfigFields on RateLimitingRuleThresholdActionConfig {
	actions {
		actionType
		alert {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
		block {
			duration
			eventSeverity
			useThresholdDuration
		}
		markForTesting {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
	}
	thresholdConfigs {
		apiAggregateType
		rollingWindowThresholdConfig {
			countAllowed
			duration
		}
		dynamicThresholdConfig {
			percentageExceedingMeanAllowed
			meanCalculationDuration
			duration
		}
		valueBasedThresholdConfig {
			valueType
			uniqueValuesAllowed
			duration
			sensitiveParamsEvaluationType
		}
		thresholdConfigType
		userAggregateType
	}
}
fragment TransactionActionConfigFields on RateLimitingTransactionActionConfig {
	action {
		actionType
		alert {
			eventSeverity
		}
		allow {
			duration
		}
		block {
			duration
			eventSeverity
		}
	}
	expirationTimestamp
}
fragment RuleConfigScopeFields on RuleConfigScope {
	environmentScope {
		environmentIds
	}
}
fragment RuleStatusFields on RateLimitingRuleStatus {
	internal
	ruleCreationSource
}
fragment LeafConditionFields on RateLimitingRuleLeafCondition {
	conditionType
	datatypeCondition {
		datasetIds
		datatypeIds
		dataLocation
		datatypeMatching {
			datatypeMatchingType
			regexBasedMatching {
				customMatchingLocation {
					metadataType
					keyCondition {
						operator
						value
					}
				}
			}
		}
	}
	ipAddressCondition {
		cidrIpRanges
		ipAddresses
		rawInputIpData
		exclude
		ipAddressConditionType
	}
	ipReputationCondition {
		minIpReputationSeverity
	}
	ipLocationTypeCondition {
		ipLocationTypes
		exclude
	}
	emailDomainCondition {
		emailRegexes
		exclude
	}
	ipOrganisationCondition {
		ipOrganisationRegexes
		exclude
	}
	ipAsnCondition {
		ipAsnRegexes
		exclude
	}
	userIdCondition {
		userIdRegexes
		userIds
		exclude
	}
	userAgentCondition {
		userAgentRegexes
		exclude
	}
	ipConnectionTypeCondition {
		ipConnectionTypes
		exclude
	}
	ipAbuseVelocityCondition {
		minIpAbuseVelocity
	}
	keyValueCondition {
		keyCondition {
			operator
			value
		}
		metadataType
		valueCondition {
			operator
			value
		}
	}
	regionCondition {
		regionIdentifiers {
			countryIsoCode
		}
		exclude
	}
	requestScannerTypeCondition {
		scannerTypes
		exclude
	}
	scopeCondition {
		entityScope {
			entityIds
			entityType
		}
		labelScope {
			labelIds
			labelType
		}
		scopeType
		urlScope {
			urlRegexes
		}
	}
}
`

func GetRateLimitingDetails(
	ctx_ context.Context,
	client_ graphql.Client,
	category []*RateLimitingRuleCategory,
	rateLimitingRulesFilter *InputRateLimitingRulesFilter,
) (data_ *GetRateLimitingDetailsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetRateLimitingDetails",
		Query:  GetRateLimitingDetails_Operation,
		Variables: &__GetRateLimitingDetailsInput{
			Category:                category,
			RateLimitingRulesFilter: rateLimitingRulesFilter,
		},
	}

	data_ = &GetRateLimitingDetailsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetRateLimitingRulesName.
const GetRateLimitingRulesName_Operation = `
query GetRateLimitingRulesName ($category: [RateLimitingRuleCategory], $rateLimitingRulesFilter: InputRateLimitingRulesFilter) {
	rateLimitingRules(category: $category, rateLimitingRulesFilter: $rateLimitingRulesFilter) {
		count
		total
		results {
			name
		}
	}
}
`

func GetRateLimitingRulesName(
	ctx_ context.Context,
	client_ graphql.Client,
	category []*RateLimitingRuleCategory,
	rateLimitingRulesFilter *InputRateLimitingRulesFilter,
) (data_ *GetRateLimitingRulesNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetRateLimitingRulesName",
		Query:  GetRateLimitingRulesName_Operation,
		Variables: &__GetRateLimitingRulesNameInput{
			Category:                category,
			RateLimitingRulesFilter: rateLimitingRulesFilter,
		},
	}

	data_ = &GetRateLimitingRulesNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateDataSet.
const UpdateDataSet_Operation = `
mutation UpdateDataSet ($dataSetUpdate: InputDataSetUpdate!) {
	updateDataSet(dataSetUpdate: $dataSetUpdate) {
		id
		name
		description
		iconType
	}
}
`

func UpdateDataSet(
	ctx_ context.Context,
	client_ graphql.Client,
	dataSetUpdate InputDataSetUpdate,
) (data_ *UpdateDataSetResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateDataSet",
		Query:  UpdateDataSet_Operation,
		Variables: &__UpdateDataSetInput{
			DataSetUpdate: dataSetUpdate,
		},
	}

	data_ = &UpdateDataSetResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateRateLimitingRule.
const UpdateRateLimitingRule_Operation = `
mutation UpdateRateLimitingRule ($input: InputRateLimitingRule!) {
	updateRateLimitingRule(rateLimitingRule: $input) {
		... RateLimitingRuleFields
	}
}
fragment RateLimitingRuleFields on RateLimitingRule {
	category
	description
	enabled
	id
	name
	labels {
		key
		value
	}
	thresholdActionConfigs {
		... ThresholdActionConfigFields
	}
	transactionActionConfigs {
		... TransactionActionConfigFields
	}
	ruleConfigScope {
		... RuleConfigScopeFields
	}
	ruleStatus {
		... RuleStatusFields
	}
	conditions {
		leafCondition {
			... LeafConditionFields
		}
	}
}
fragment ThresholdActionConfigFields on RateLimitingRuleThresholdActionConfig {
	actions {
		actionType
		alert {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
		block {
			duration
			eventSeverity
			useThresholdDuration
		}
		markForTesting {
			eventSeverity
			agentEffect {
				agentModifications {
					agentModificationType
					headerInjection {
						key
						value
						headerCategory
					}
				}
			}
		}
	}
	thresholdConfigs {
		apiAggregateType
		rollingWindowThresholdConfig {
			countAllowed
			duration
		}
		dynamicThresholdConfig {
			percentageExceedingMeanAllowed
			meanCalculationDuration
			duration
		}
		valueBasedThresholdConfig {
			valueType
			uniqueValuesAllowed
			duration
			sensitiveParamsEvaluationType
		}
		thresholdConfigType
		userAggregateType
	}
}
fragment TransactionActionConfigFields on RateLimitingTransactionActionConfig {
	action {
		actionType
		alert {
			eventSeverity
		}
		allow {
			duration
		}
		block {
			duration
			eventSeverity
		}
	}
	expirationTimestamp
}
fragment RuleConfigScopeFields on RuleConfigScope {
	environmentScope {
		environmentIds
	}
}
fragment RuleStatusFields on RateLimitingRuleStatus {
	internal
	ruleCreationSource
}
fragment LeafConditionFields on RateLimitingRuleLeafCondition {
	conditionType
	datatypeCondition {
		datasetIds
		datatypeIds
		dataLocation
		datatypeMatching {
			datatypeMatchingType
			regexBasedMatching {
				customMatchingLocation {
					metadataType
					keyCondition {
						operator
						value
					}
				}
			}
		}
	}
	ipAddressCondition {
		cidrIpRanges
		ipAddresses
		rawInputIpData
		exclude
		ipAddressConditionType
	}
	ipReputationCondition {
		minIpReputationSeverity
	}
	ipLocationTypeCondition {
		ipLocationTypes
		exclude
	}
	emailDomainCondition {
		emailRegexes
		exclude
	}
	ipOrganisationCondition {
		ipOrganisationRegexes
		exclude
	}
	ipAsnCondition {
		ipAsnRegexes
		exclude
	}
	userIdCondition {
		userIdRegexes
		userIds
		exclude
	}
	userAgentCondition {
		userAgentRegexes
		exclude
	}
	ipConnectionTypeCondition {
		ipConnectionTypes
		exclude
	}
	ipAbuseVelocityCondition {
		minIpAbuseVelocity
	}
	keyValueCondition {
		keyCondition {
			operator
			value
		}
		metadataType
		valueCondition {
			operator
			value
		}
	}
	regionCondition {
		regionIdentifiers {
			countryIsoCode
		}
		exclude
	}
	requestScannerTypeCondition {
		scannerTypes
		exclude
	}
	scopeCondition {
		entityScope {
			entityIds
			entityType
		}
		labelScope {
			labelIds
			labelType
		}
		scopeType
		urlScope {
			urlRegexes
		}
	}
}
`

func UpdateRateLimitingRule(
	ctx_ context.Context,
	client_ graphql.Client,
	input InputRateLimitingRule,
) (data_ *UpdateRateLimitingRuleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateRateLimitingRule",
		Query:  UpdateRateLimitingRule_Operation,
		Variables: &__UpdateRateLimitingRuleInput{
			Input: input,
		},
	}

	data_ = &UpdateRateLimitingRuleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
